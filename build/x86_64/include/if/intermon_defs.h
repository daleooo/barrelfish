#ifndef __intermon_IF_H
#define __intermon_IF_H 1
/*
 * Copyright (c) 2010, ETH Zurich.
 * All rights reserved.
 * 
 * INTERFACE NAME: intermon
 * INTEFACE FILE: ../if/intermon.if
 * INTERFACE DESCRIPTION: The Interface between monitors
 * 
 * This file is distributed under the terms in the attached LICENSE
 * file. If you do not find this file, copies can be found by
 * writing to:
 * ETH Zurich D-INFK, Universitaetstr.6, CH-8092 Zurich.
 * Attn: Systems Group.
 * 
 * THIS FILE IS AUTOMATICALLY GENERATED BY FLOUNDER: DO NOT EDIT!
 */

#include <flounder/flounder.h>

/*
 * Concrete type definitions
 */
typedef uint64_t intermon_genpaddr_t;
typedef uint64_t intermon_genvaddr_t;
typedef uint32_t intermon_rsrcid_t;
typedef uint64_t intermon_errval_t;
typedef uint64_t intermon_cycles_t;
typedef uint32_t intermon_iref_t;
typedef uint8_t intermon_coreid_t;
typedef uint32_t intermon_domainid_t;
typedef uint8_t intermon_coreid_t_t;
typedef uint32_t intermon_chanid_t_t;
typedef uint64_t intermon_con_id_t_t;
typedef uint64_t intermon_mon_id_t_t;
typedef uint64_t intermon_state_id_t_t;
typedef uint64_t intermon_vci_t_t;
typedef uint32_t intermon_capid_t_t;
typedef uint64_t intermon_coremask_t[4];
struct _intermon_caprep__struct {
    uint64_t w0;
    uint64_t w1;
    uint64_t w2;
    uint64_t w3;
};
typedef struct _intermon_caprep__struct intermon_caprep_t;

/*
 * Forward declaration of binding type
 */
struct intermon_binding;

/*
 * Contination (callback) and control function types
 */
typedef  void intermon_bind_continuation_fn(void *st, errval_t err, struct intermon_binding *_binding);
typedef  bool intermon_can_send_fn(struct intermon_binding *_binding);
typedef  errval_t intermon_register_send_fn(struct intermon_binding *_binding, struct waitset *ws, struct event_closure _continuation);
typedef  errval_t intermon_change_waitset_fn(struct intermon_binding *_binding, struct waitset *ws);
typedef  errval_t intermon_control_fn(struct intermon_binding *_binding, idc_control_t control);
typedef  void intermon_error_handler_fn(struct intermon_binding *_binding, errval_t err);

/*
 * Enumeration for message numbers
 */
typedef enum intermon_msg_enum {
    intermon___dummy__msgnum = 0,
    intermon_spawnd_image_request__msgnum = 1,
    intermon_spawnd_image_reply__msgnum = 2,
    intermon_monitor_initialized__msgnum = 3,
    intermon_trace_caps_request__msgnum = 4,
    intermon_trace_caps_reply__msgnum = 5,
    intermon_mem_serv_iref_request__msgnum = 6,
    intermon_mem_serv_iref_reply__msgnum = 7,
    intermon_ramfs_serv_iref_request__msgnum = 8,
    intermon_ramfs_serv_iref_reply__msgnum = 9,
    intermon_name_serv_iref_request__msgnum = 10,
    intermon_name_serv_iref_reply__msgnum = 11,
    intermon_monitor_mem_iref_request__msgnum = 12,
    intermon_monitor_mem_iref_reply__msgnum = 13,
    intermon_bind_monitor_request__msgnum = 14,
    intermon_bind_monitor_reply__msgnum = 15,
    intermon_bind_monitor_proxy__msgnum = 16,
    intermon_bind_monitor_request_scc__msgnum = 17,
    intermon_bind_monitor_reply_scc__msgnum = 18,
    intermon_bind_monitor_proxy_scc__msgnum = 19,
    intermon_bind_monitor_request_bmp__msgnum = 20,
    intermon_bind_monitor_reply_bmp__msgnum = 21,
    intermon_bind_monitor_proxy_bmp__msgnum = 22,
    intermon_new_monitor_notify__msgnum = 23,
    intermon_bind_ump_request__msgnum = 24,
    intermon_bind_ump_reply__msgnum = 25,
    intermon_cap_send_request__msgnum = 26,
    intermon_span_domain_request__msgnum = 27,
    intermon_span_domain_reply__msgnum = 28,
    intermon_rsrc_join__msgnum = 29,
    intermon_rsrc_join_complete__msgnum = 30,
    intermon_rsrc_phase_data__msgnum = 31,
    intermon_rsrc_timer_sync__msgnum = 32,
    intermon_rsrc_timer_sync_reply__msgnum = 33,
    intermon_rsrc_phase__msgnum = 34,
    intermon_multihop_routing_table_request__msgnum = 35,
    intermon_multihop_routing_table_response__msgnum = 36,
    intermon_multihop_routing_table_grow__msgnum = 37,
    intermon_bind_multihop_intermon_request__msgnum = 38,
    intermon_bind_multihop_intermon_reply__msgnum = 39,
    intermon_multihop_message__msgnum = 40,
    intermon_multihop_cap_send__msgnum = 41,
    intermon_trace_prepare__msgnum = 42,
    intermon_trace_prepare_finished__msgnum = 43,
    intermon_trace_measure__msgnum = 44,
    intermon_trace_measure_ack__msgnum = 45,
    intermon_bfscope_flush_send_forward__msgnum = 46,
    intermon_bfscope_flush_ack_forward__msgnum = 47
} intermon_msg_enum;

/*
 * Message type signatures (transmit)
 */
typedef  errval_t intermon_spawnd_image_request__tx_method_fn(struct intermon_binding *_binding, struct event_closure _continuation);
typedef  errval_t intermon_spawnd_image_reply__tx_method_fn(struct intermon_binding *_binding, struct event_closure _continuation, intermon_genpaddr_t base, uint32_t bytes);
typedef  errval_t intermon_monitor_initialized__tx_method_fn(struct intermon_binding *_binding, struct event_closure _continuation);
typedef  errval_t intermon_trace_caps_request__tx_method_fn(struct intermon_binding *_binding, struct event_closure _continuation);
typedef  errval_t intermon_trace_caps_reply__tx_method_fn(struct intermon_binding *_binding, struct event_closure _continuation, intermon_caprep_t cap);
typedef  errval_t intermon_mem_serv_iref_request__tx_method_fn(struct intermon_binding *_binding, struct event_closure _continuation);
typedef  errval_t intermon_mem_serv_iref_reply__tx_method_fn(struct intermon_binding *_binding, struct event_closure _continuation, iref_t iref);
typedef  errval_t intermon_ramfs_serv_iref_request__tx_method_fn(struct intermon_binding *_binding, struct event_closure _continuation);
typedef  errval_t intermon_ramfs_serv_iref_reply__tx_method_fn(struct intermon_binding *_binding, struct event_closure _continuation, iref_t iref);
typedef  errval_t intermon_name_serv_iref_request__tx_method_fn(struct intermon_binding *_binding, struct event_closure _continuation);
typedef  errval_t intermon_name_serv_iref_reply__tx_method_fn(struct intermon_binding *_binding, struct event_closure _continuation, iref_t iref);
typedef  errval_t intermon_monitor_mem_iref_request__tx_method_fn(struct intermon_binding *_binding, struct event_closure _continuation);
typedef  errval_t intermon_monitor_mem_iref_reply__tx_method_fn(struct intermon_binding *_binding, struct event_closure _continuation, iref_t iref);
typedef  errval_t intermon_bind_monitor_request__tx_method_fn(struct intermon_binding *_binding, struct event_closure _continuation, intermon_coreid_t_t core_id, intermon_caprep_t cap);
typedef  errval_t intermon_bind_monitor_reply__tx_method_fn(struct intermon_binding *_binding, struct event_closure _continuation, intermon_errval_t err);
typedef  errval_t intermon_bind_monitor_proxy__tx_method_fn(struct intermon_binding *_binding, struct event_closure _continuation, intermon_coreid_t_t dst_core_id, intermon_caprep_t cap);
typedef  errval_t intermon_bind_monitor_request_scc__tx_method_fn(struct intermon_binding *_binding, struct event_closure _continuation, intermon_coreid_t_t core_id, intermon_caprep_t cap, intermon_chanid_t_t chan_id, intermon_coreid_t_t from_core_id);
typedef  errval_t intermon_bind_monitor_reply_scc__tx_method_fn(struct intermon_binding *_binding, struct event_closure _continuation, intermon_errval_t err, intermon_chanid_t_t chan_id, intermon_coreid_t_t core_id);
typedef  errval_t intermon_bind_monitor_proxy_scc__tx_method_fn(struct intermon_binding *_binding, struct event_closure _continuation, intermon_coreid_t_t dst_core_id, intermon_caprep_t cap, intermon_chanid_t_t chan_id, intermon_coreid_t_t core_id);
typedef  errval_t intermon_bind_monitor_request_bmp__tx_method_fn(struct intermon_binding *_binding, struct event_closure _continuation, intermon_coreid_t_t core_id, intermon_chanid_t_t chan_id, intermon_coreid_t_t from_core_id);
typedef  errval_t intermon_bind_monitor_reply_bmp__tx_method_fn(struct intermon_binding *_binding, struct event_closure _continuation, intermon_errval_t err, intermon_chanid_t_t chan_id, intermon_coreid_t_t core_id);
typedef  errval_t intermon_bind_monitor_proxy_bmp__tx_method_fn(struct intermon_binding *_binding, struct event_closure _continuation, intermon_coreid_t_t dst_core_id, intermon_chanid_t_t chan_id, intermon_coreid_t_t core_id);
typedef  errval_t intermon_new_monitor_notify__tx_method_fn(struct intermon_binding *_binding, struct event_closure _continuation, intermon_coreid_t_t core_id);
typedef  errval_t intermon_bind_ump_request__tx_method_fn(struct intermon_binding *_binding, struct event_closure _continuation, iref_t iref, intermon_mon_id_t_t mon_id, uint32_t channel_length_in, uint32_t channel_length_out, intermon_genpaddr_t framebase, uint8_t framebits, intermon_caprep_t notify);
typedef  errval_t intermon_bind_ump_reply__tx_method_fn(struct intermon_binding *_binding, struct event_closure _continuation, intermon_con_id_t_t con_id, intermon_mon_id_t_t mon_id, intermon_errval_t err, intermon_caprep_t notify);
typedef  errval_t intermon_cap_send_request__tx_method_fn(struct intermon_binding *_binding, struct event_closure _continuation, intermon_con_id_t_t con_id, intermon_capid_t_t capid, intermon_caprep_t cap, intermon_errval_t err, bool give_away, bool has_descendents, intermon_coremask_t on_cores, bool null_cap);
typedef  errval_t intermon_span_domain_request__tx_method_fn(struct intermon_binding *_binding, struct event_closure _continuation, intermon_state_id_t_t state_id, intermon_genpaddr_t vnodebase, intermon_genpaddr_t framebase, uint8_t framebits);
typedef  errval_t intermon_span_domain_reply__tx_method_fn(struct intermon_binding *_binding, struct event_closure _continuation, intermon_state_id_t_t state_id, intermon_errval_t err);
typedef  errval_t intermon_rsrc_join__tx_method_fn(struct intermon_binding *_binding, struct event_closure _continuation, intermon_rsrcid_t id, intermon_coreid_t_t coreid);
typedef  errval_t intermon_rsrc_join_complete__tx_method_fn(struct intermon_binding *_binding, struct event_closure _continuation, intermon_rsrcid_t id);
typedef  errval_t intermon_rsrc_phase_data__tx_method_fn(struct intermon_binding *_binding, struct event_closure _continuation, intermon_rsrcid_t id, uint32_t phase, const uint8_t *data, size_t len);
typedef  errval_t intermon_rsrc_timer_sync__tx_method_fn(struct intermon_binding *_binding, struct event_closure _continuation, uint64_t timestamp);
typedef  errval_t intermon_rsrc_timer_sync_reply__tx_method_fn(struct intermon_binding *_binding, struct event_closure _continuation, intermon_errval_t err);
typedef  errval_t intermon_rsrc_phase__tx_method_fn(struct intermon_binding *_binding, struct event_closure _continuation, intermon_rsrcid_t id, uint32_t phase, uint64_t timestamp);
typedef  errval_t intermon_multihop_routing_table_request__tx_method_fn(struct intermon_binding *_binding, struct event_closure _continuation, intermon_coreid_t source_coreid);
typedef  errval_t intermon_multihop_routing_table_response__tx_method_fn(struct intermon_binding *_binding, struct event_closure _continuation, intermon_errval_t err, intermon_coreid_t source_coreid, intermon_coreid_t max_coreid, const intermon_coreid_t *to, size_t len);
typedef  errval_t intermon_multihop_routing_table_grow__tx_method_fn(struct intermon_binding *_binding, struct event_closure _continuation, intermon_coreid_t forwarder, const intermon_coreid_t *destinations, size_t len);
typedef  errval_t intermon_bind_multihop_intermon_request__tx_method_fn(struct intermon_binding *_binding, struct event_closure _continuation, iref_t iref, intermon_vci_t_t sender_vci, intermon_coreid_t core_id);
typedef  errval_t intermon_bind_multihop_intermon_reply__tx_method_fn(struct intermon_binding *_binding, struct event_closure _continuation, intermon_vci_t_t receiver_vci, intermon_vci_t_t sender_vci, intermon_errval_t err);
typedef  errval_t intermon_multihop_message__tx_method_fn(struct intermon_binding *_binding, struct event_closure _continuation, intermon_vci_t_t vci, uint8_t direction, uint8_t flags, uint32_t ack, const uint8_t *payload, size_t size);
typedef  errval_t intermon_multihop_cap_send__tx_method_fn(struct intermon_binding *_binding, struct event_closure _continuation, intermon_vci_t_t vci, uint8_t direction, intermon_capid_t_t capid, intermon_errval_t err, intermon_caprep_t cap, bool null_cap);
typedef  errval_t intermon_trace_prepare__tx_method_fn(struct intermon_binding *_binding, struct event_closure _continuation, intermon_coreid_t origin_core);
typedef  errval_t intermon_trace_prepare_finished__tx_method_fn(struct intermon_binding *_binding, struct event_closure _continuation);
typedef  errval_t intermon_trace_measure__tx_method_fn(struct intermon_binding *_binding, struct event_closure _continuation, intermon_coreid_t_t origin_core, uint64_t t0);
typedef  errval_t intermon_trace_measure_ack__tx_method_fn(struct intermon_binding *_binding, struct event_closure _continuation, intermon_coreid_t origin_core, uint64_t t0, uint64_t t1, uint64_t t2);
typedef  errval_t intermon_bfscope_flush_send_forward__tx_method_fn(struct intermon_binding *_binding, struct event_closure _continuation, iref_t iref);
typedef  errval_t intermon_bfscope_flush_ack_forward__tx_method_fn(struct intermon_binding *_binding, struct event_closure _continuation);

/*
 * Message type signatures (receive)
 */
typedef  void intermon_spawnd_image_request__rx_method_fn(struct intermon_binding *_binding);
typedef  void intermon_spawnd_image_reply__rx_method_fn(struct intermon_binding *_binding, intermon_genpaddr_t base, uint32_t bytes);
typedef  void intermon_monitor_initialized__rx_method_fn(struct intermon_binding *_binding);
typedef  void intermon_trace_caps_request__rx_method_fn(struct intermon_binding *_binding);
typedef  void intermon_trace_caps_reply__rx_method_fn(struct intermon_binding *_binding, intermon_caprep_t cap);
typedef  void intermon_mem_serv_iref_request__rx_method_fn(struct intermon_binding *_binding);
typedef  void intermon_mem_serv_iref_reply__rx_method_fn(struct intermon_binding *_binding, iref_t iref);
typedef  void intermon_ramfs_serv_iref_request__rx_method_fn(struct intermon_binding *_binding);
typedef  void intermon_ramfs_serv_iref_reply__rx_method_fn(struct intermon_binding *_binding, iref_t iref);
typedef  void intermon_name_serv_iref_request__rx_method_fn(struct intermon_binding *_binding);
typedef  void intermon_name_serv_iref_reply__rx_method_fn(struct intermon_binding *_binding, iref_t iref);
typedef  void intermon_monitor_mem_iref_request__rx_method_fn(struct intermon_binding *_binding);
typedef  void intermon_monitor_mem_iref_reply__rx_method_fn(struct intermon_binding *_binding, iref_t iref);
typedef  void intermon_bind_monitor_request__rx_method_fn(struct intermon_binding *_binding, intermon_coreid_t_t core_id, intermon_caprep_t cap);
typedef  void intermon_bind_monitor_reply__rx_method_fn(struct intermon_binding *_binding, intermon_errval_t err);
typedef  void intermon_bind_monitor_proxy__rx_method_fn(struct intermon_binding *_binding, intermon_coreid_t_t dst_core_id, intermon_caprep_t cap);
typedef  void intermon_bind_monitor_request_scc__rx_method_fn(struct intermon_binding *_binding, intermon_coreid_t_t core_id, intermon_caprep_t cap, intermon_chanid_t_t chan_id, intermon_coreid_t_t from_core_id);
typedef  void intermon_bind_monitor_reply_scc__rx_method_fn(struct intermon_binding *_binding, intermon_errval_t err, intermon_chanid_t_t chan_id, intermon_coreid_t_t core_id);
typedef  void intermon_bind_monitor_proxy_scc__rx_method_fn(struct intermon_binding *_binding, intermon_coreid_t_t dst_core_id, intermon_caprep_t cap, intermon_chanid_t_t chan_id, intermon_coreid_t_t core_id);
typedef  void intermon_bind_monitor_request_bmp__rx_method_fn(struct intermon_binding *_binding, intermon_coreid_t_t core_id, intermon_chanid_t_t chan_id, intermon_coreid_t_t from_core_id);
typedef  void intermon_bind_monitor_reply_bmp__rx_method_fn(struct intermon_binding *_binding, intermon_errval_t err, intermon_chanid_t_t chan_id, intermon_coreid_t_t core_id);
typedef  void intermon_bind_monitor_proxy_bmp__rx_method_fn(struct intermon_binding *_binding, intermon_coreid_t_t dst_core_id, intermon_chanid_t_t chan_id, intermon_coreid_t_t core_id);
typedef  void intermon_new_monitor_notify__rx_method_fn(struct intermon_binding *_binding, intermon_coreid_t_t core_id);
typedef  void intermon_bind_ump_request__rx_method_fn(struct intermon_binding *_binding, iref_t iref, intermon_mon_id_t_t mon_id, uint32_t channel_length_in, uint32_t channel_length_out, intermon_genpaddr_t framebase, uint8_t framebits, intermon_caprep_t notify);
typedef  void intermon_bind_ump_reply__rx_method_fn(struct intermon_binding *_binding, intermon_con_id_t_t con_id, intermon_mon_id_t_t mon_id, intermon_errval_t err, intermon_caprep_t notify);
typedef  void intermon_cap_send_request__rx_method_fn(struct intermon_binding *_binding, intermon_con_id_t_t con_id, intermon_capid_t_t capid, intermon_caprep_t cap, intermon_errval_t err, bool give_away, bool has_descendents, intermon_coremask_t on_cores, bool null_cap);
typedef  void intermon_span_domain_request__rx_method_fn(struct intermon_binding *_binding, intermon_state_id_t_t state_id, intermon_genpaddr_t vnodebase, intermon_genpaddr_t framebase, uint8_t framebits);
typedef  void intermon_span_domain_reply__rx_method_fn(struct intermon_binding *_binding, intermon_state_id_t_t state_id, intermon_errval_t err);
typedef  void intermon_rsrc_join__rx_method_fn(struct intermon_binding *_binding, intermon_rsrcid_t id, intermon_coreid_t_t coreid);
typedef  void intermon_rsrc_join_complete__rx_method_fn(struct intermon_binding *_binding, intermon_rsrcid_t id);
typedef  void intermon_rsrc_phase_data__rx_method_fn(struct intermon_binding *_binding, intermon_rsrcid_t id, uint32_t phase, uint8_t *data, size_t len);
typedef  void intermon_rsrc_timer_sync__rx_method_fn(struct intermon_binding *_binding, uint64_t timestamp);
typedef  void intermon_rsrc_timer_sync_reply__rx_method_fn(struct intermon_binding *_binding, intermon_errval_t err);
typedef  void intermon_rsrc_phase__rx_method_fn(struct intermon_binding *_binding, intermon_rsrcid_t id, uint32_t phase, uint64_t timestamp);
typedef  void intermon_multihop_routing_table_request__rx_method_fn(struct intermon_binding *_binding, intermon_coreid_t source_coreid);
typedef  void intermon_multihop_routing_table_response__rx_method_fn(struct intermon_binding *_binding, intermon_errval_t err, intermon_coreid_t source_coreid, intermon_coreid_t max_coreid, intermon_coreid_t *to, size_t len);
typedef  void intermon_multihop_routing_table_grow__rx_method_fn(struct intermon_binding *_binding, intermon_coreid_t forwarder, intermon_coreid_t *destinations, size_t len);
typedef  void intermon_bind_multihop_intermon_request__rx_method_fn(struct intermon_binding *_binding, iref_t iref, intermon_vci_t_t sender_vci, intermon_coreid_t core_id);
typedef  void intermon_bind_multihop_intermon_reply__rx_method_fn(struct intermon_binding *_binding, intermon_vci_t_t receiver_vci, intermon_vci_t_t sender_vci, intermon_errval_t err);
typedef  void intermon_multihop_message__rx_method_fn(struct intermon_binding *_binding, intermon_vci_t_t vci, uint8_t direction, uint8_t flags, uint32_t ack, uint8_t *payload, size_t size);
typedef  void intermon_multihop_cap_send__rx_method_fn(struct intermon_binding *_binding, intermon_vci_t_t vci, uint8_t direction, intermon_capid_t_t capid, intermon_errval_t err, intermon_caprep_t cap, bool null_cap);
typedef  void intermon_trace_prepare__rx_method_fn(struct intermon_binding *_binding, intermon_coreid_t origin_core);
typedef  void intermon_trace_prepare_finished__rx_method_fn(struct intermon_binding *_binding);
typedef  void intermon_trace_measure__rx_method_fn(struct intermon_binding *_binding, intermon_coreid_t_t origin_core, uint64_t t0);
typedef  void intermon_trace_measure_ack__rx_method_fn(struct intermon_binding *_binding, intermon_coreid_t origin_core, uint64_t t0, uint64_t t1, uint64_t t2);
typedef  void intermon_bfscope_flush_send_forward__rx_method_fn(struct intermon_binding *_binding, iref_t iref);
typedef  void intermon_bfscope_flush_ack_forward__rx_method_fn(struct intermon_binding *_binding);

/*
 * Struct type for holding the args for each msg
 */
struct intermon_spawnd_image_reply__args {
    intermon_genpaddr_t base;
    uint32_t bytes;
};
struct intermon_trace_caps_reply__args {
    intermon_caprep_t cap;
};
struct intermon_mem_serv_iref_reply__args {
    iref_t iref;
};
struct intermon_ramfs_serv_iref_reply__args {
    iref_t iref;
};
struct intermon_name_serv_iref_reply__args {
    iref_t iref;
};
struct intermon_monitor_mem_iref_reply__args {
    iref_t iref;
};
struct intermon_bind_monitor_request__args {
    intermon_coreid_t_t core_id;
    intermon_caprep_t cap;
};
struct intermon_bind_monitor_reply__args {
    intermon_errval_t err;
};
struct intermon_bind_monitor_proxy__args {
    intermon_coreid_t_t dst_core_id;
    intermon_caprep_t cap;
};
struct intermon_bind_monitor_request_scc__args {
    intermon_coreid_t_t core_id;
    intermon_caprep_t cap;
    intermon_chanid_t_t chan_id;
    intermon_coreid_t_t from_core_id;
};
struct intermon_bind_monitor_reply_scc__args {
    intermon_errval_t err;
    intermon_chanid_t_t chan_id;
    intermon_coreid_t_t core_id;
};
struct intermon_bind_monitor_proxy_scc__args {
    intermon_coreid_t_t dst_core_id;
    intermon_caprep_t cap;
    intermon_chanid_t_t chan_id;
    intermon_coreid_t_t core_id;
};
struct intermon_bind_monitor_request_bmp__args {
    intermon_coreid_t_t core_id;
    intermon_chanid_t_t chan_id;
    intermon_coreid_t_t from_core_id;
};
struct intermon_bind_monitor_reply_bmp__args {
    intermon_errval_t err;
    intermon_chanid_t_t chan_id;
    intermon_coreid_t_t core_id;
};
struct intermon_bind_monitor_proxy_bmp__args {
    intermon_coreid_t_t dst_core_id;
    intermon_chanid_t_t chan_id;
    intermon_coreid_t_t core_id;
};
struct intermon_new_monitor_notify__args {
    intermon_coreid_t_t core_id;
};
struct intermon_bind_ump_request__args {
    iref_t iref;
    intermon_mon_id_t_t mon_id;
    uint32_t channel_length_in;
    uint32_t channel_length_out;
    intermon_genpaddr_t framebase;
    uint8_t framebits;
    intermon_caprep_t notify;
};
struct intermon_bind_ump_reply__args {
    intermon_con_id_t_t con_id;
    intermon_mon_id_t_t mon_id;
    intermon_errval_t err;
    intermon_caprep_t notify;
};
struct intermon_cap_send_request__args {
    intermon_con_id_t_t con_id;
    intermon_capid_t_t capid;
    intermon_caprep_t cap;
    intermon_errval_t err;
    bool give_away;
    bool has_descendents;
    intermon_coremask_t *on_cores;
    bool null_cap;
};
struct intermon_span_domain_request__args {
    intermon_state_id_t_t state_id;
    intermon_genpaddr_t vnodebase;
    intermon_genpaddr_t framebase;
    uint8_t framebits;
};
struct intermon_span_domain_reply__args {
    intermon_state_id_t_t state_id;
    intermon_errval_t err;
};
struct intermon_rsrc_join__args {
    intermon_rsrcid_t id;
    intermon_coreid_t_t coreid;
};
struct intermon_rsrc_join_complete__args {
    intermon_rsrcid_t id;
};
struct intermon_rsrc_phase_data__args {
    intermon_rsrcid_t id;
    uint32_t phase;
    uint8_t *data;
    size_t len;
};
struct intermon_rsrc_timer_sync__args {
    uint64_t timestamp;
};
struct intermon_rsrc_timer_sync_reply__args {
    intermon_errval_t err;
};
struct intermon_rsrc_phase__args {
    intermon_rsrcid_t id;
    uint32_t phase;
    uint64_t timestamp;
};
struct intermon_multihop_routing_table_request__args {
    intermon_coreid_t source_coreid;
};
struct intermon_multihop_routing_table_response__args {
    intermon_errval_t err;
    intermon_coreid_t source_coreid;
    intermon_coreid_t max_coreid;
    intermon_coreid_t *to;
    size_t len;
};
struct intermon_multihop_routing_table_grow__args {
    intermon_coreid_t forwarder;
    intermon_coreid_t *destinations;
    size_t len;
};
struct intermon_bind_multihop_intermon_request__args {
    iref_t iref;
    intermon_vci_t_t sender_vci;
    intermon_coreid_t core_id;
};
struct intermon_bind_multihop_intermon_reply__args {
    intermon_vci_t_t receiver_vci;
    intermon_vci_t_t sender_vci;
    intermon_errval_t err;
};
struct intermon_multihop_message__args {
    intermon_vci_t_t vci;
    uint8_t direction;
    uint8_t flags;
    uint32_t ack;
    uint8_t *payload;
    size_t size;
};
struct intermon_multihop_cap_send__args {
    intermon_vci_t_t vci;
    uint8_t direction;
    intermon_capid_t_t capid;
    intermon_errval_t err;
    intermon_caprep_t cap;
    bool null_cap;
};
struct intermon_trace_prepare__args {
    intermon_coreid_t origin_core;
};
struct intermon_trace_measure__args {
    intermon_coreid_t_t origin_core;
    uint64_t t0;
};
struct intermon_trace_measure_ack__args {
    intermon_coreid_t origin_core;
    uint64_t t0;
    uint64_t t1;
    uint64_t t2;
};
struct intermon_bfscope_flush_send_forward__args {
    iref_t iref;
};

/*
 * Union type for all message arguments
 */
union intermon_arg_union {
    struct intermon_spawnd_image_reply__args spawnd_image_reply;
    struct intermon_trace_caps_reply__args trace_caps_reply;
    struct intermon_mem_serv_iref_reply__args mem_serv_iref_reply;
    struct intermon_ramfs_serv_iref_reply__args ramfs_serv_iref_reply;
    struct intermon_name_serv_iref_reply__args name_serv_iref_reply;
    struct intermon_monitor_mem_iref_reply__args monitor_mem_iref_reply;
    struct intermon_bind_monitor_request__args bind_monitor_request;
    struct intermon_bind_monitor_reply__args bind_monitor_reply;
    struct intermon_bind_monitor_proxy__args bind_monitor_proxy;
    struct intermon_bind_monitor_request_scc__args bind_monitor_request_scc;
    struct intermon_bind_monitor_reply_scc__args bind_monitor_reply_scc;
    struct intermon_bind_monitor_proxy_scc__args bind_monitor_proxy_scc;
    struct intermon_bind_monitor_request_bmp__args bind_monitor_request_bmp;
    struct intermon_bind_monitor_reply_bmp__args bind_monitor_reply_bmp;
    struct intermon_bind_monitor_proxy_bmp__args bind_monitor_proxy_bmp;
    struct intermon_new_monitor_notify__args new_monitor_notify;
    struct intermon_bind_ump_request__args bind_ump_request;
    struct intermon_bind_ump_reply__args bind_ump_reply;
    struct intermon_cap_send_request__args cap_send_request;
    struct intermon_span_domain_request__args span_domain_request;
    struct intermon_span_domain_reply__args span_domain_reply;
    struct intermon_rsrc_join__args rsrc_join;
    struct intermon_rsrc_join_complete__args rsrc_join_complete;
    struct intermon_rsrc_phase_data__args rsrc_phase_data;
    struct intermon_rsrc_timer_sync__args rsrc_timer_sync;
    struct intermon_rsrc_timer_sync_reply__args rsrc_timer_sync_reply;
    struct intermon_rsrc_phase__args rsrc_phase;
    struct intermon_multihop_routing_table_request__args multihop_routing_table_request;
    struct intermon_multihop_routing_table_response__args multihop_routing_table_response;
    struct intermon_multihop_routing_table_grow__args multihop_routing_table_grow;
    struct intermon_bind_multihop_intermon_request__args bind_multihop_intermon_request;
    struct intermon_bind_multihop_intermon_reply__args bind_multihop_intermon_reply;
    struct intermon_multihop_message__args multihop_message;
    struct intermon_multihop_cap_send__args multihop_cap_send;
    struct intermon_trace_prepare__args trace_prepare;
    struct intermon_trace_measure__args trace_measure;
    struct intermon_trace_measure_ack__args trace_measure_ack;
    struct intermon_bfscope_flush_send_forward__args bfscope_flush_send_forward;
};

/*
 * VTable struct definition for the interface (transmit)
 */
struct intermon_tx_vtbl {
    intermon_spawnd_image_request__tx_method_fn *spawnd_image_request;
    intermon_spawnd_image_reply__tx_method_fn *spawnd_image_reply;
    intermon_monitor_initialized__tx_method_fn *monitor_initialized;
    intermon_trace_caps_request__tx_method_fn *trace_caps_request;
    intermon_trace_caps_reply__tx_method_fn *trace_caps_reply;
    intermon_mem_serv_iref_request__tx_method_fn *mem_serv_iref_request;
    intermon_mem_serv_iref_reply__tx_method_fn *mem_serv_iref_reply;
    intermon_ramfs_serv_iref_request__tx_method_fn *ramfs_serv_iref_request;
    intermon_ramfs_serv_iref_reply__tx_method_fn *ramfs_serv_iref_reply;
    intermon_name_serv_iref_request__tx_method_fn *name_serv_iref_request;
    intermon_name_serv_iref_reply__tx_method_fn *name_serv_iref_reply;
    intermon_monitor_mem_iref_request__tx_method_fn *monitor_mem_iref_request;
    intermon_monitor_mem_iref_reply__tx_method_fn *monitor_mem_iref_reply;
    intermon_bind_monitor_request__tx_method_fn *bind_monitor_request;
    intermon_bind_monitor_reply__tx_method_fn *bind_monitor_reply;
    intermon_bind_monitor_proxy__tx_method_fn *bind_monitor_proxy;
    intermon_bind_monitor_request_scc__tx_method_fn *bind_monitor_request_scc;
    intermon_bind_monitor_reply_scc__tx_method_fn *bind_monitor_reply_scc;
    intermon_bind_monitor_proxy_scc__tx_method_fn *bind_monitor_proxy_scc;
    intermon_bind_monitor_request_bmp__tx_method_fn *bind_monitor_request_bmp;
    intermon_bind_monitor_reply_bmp__tx_method_fn *bind_monitor_reply_bmp;
    intermon_bind_monitor_proxy_bmp__tx_method_fn *bind_monitor_proxy_bmp;
    intermon_new_monitor_notify__tx_method_fn *new_monitor_notify;
    intermon_bind_ump_request__tx_method_fn *bind_ump_request;
    intermon_bind_ump_reply__tx_method_fn *bind_ump_reply;
    intermon_cap_send_request__tx_method_fn *cap_send_request;
    intermon_span_domain_request__tx_method_fn *span_domain_request;
    intermon_span_domain_reply__tx_method_fn *span_domain_reply;
    intermon_rsrc_join__tx_method_fn *rsrc_join;
    intermon_rsrc_join_complete__tx_method_fn *rsrc_join_complete;
    intermon_rsrc_phase_data__tx_method_fn *rsrc_phase_data;
    intermon_rsrc_timer_sync__tx_method_fn *rsrc_timer_sync;
    intermon_rsrc_timer_sync_reply__tx_method_fn *rsrc_timer_sync_reply;
    intermon_rsrc_phase__tx_method_fn *rsrc_phase;
    intermon_multihop_routing_table_request__tx_method_fn *multihop_routing_table_request;
    intermon_multihop_routing_table_response__tx_method_fn *multihop_routing_table_response;
    intermon_multihop_routing_table_grow__tx_method_fn *multihop_routing_table_grow;
    intermon_bind_multihop_intermon_request__tx_method_fn *bind_multihop_intermon_request;
    intermon_bind_multihop_intermon_reply__tx_method_fn *bind_multihop_intermon_reply;
    intermon_multihop_message__tx_method_fn *multihop_message;
    intermon_multihop_cap_send__tx_method_fn *multihop_cap_send;
    intermon_trace_prepare__tx_method_fn *trace_prepare;
    intermon_trace_prepare_finished__tx_method_fn *trace_prepare_finished;
    intermon_trace_measure__tx_method_fn *trace_measure;
    intermon_trace_measure_ack__tx_method_fn *trace_measure_ack;
    intermon_bfscope_flush_send_forward__tx_method_fn *bfscope_flush_send_forward;
    intermon_bfscope_flush_ack_forward__tx_method_fn *bfscope_flush_ack_forward;
};

/*
 * VTable struct definition for the interface (receive)
 */
struct intermon_rx_vtbl {
    intermon_spawnd_image_request__rx_method_fn *spawnd_image_request;
    intermon_spawnd_image_reply__rx_method_fn *spawnd_image_reply;
    intermon_monitor_initialized__rx_method_fn *monitor_initialized;
    intermon_trace_caps_request__rx_method_fn *trace_caps_request;
    intermon_trace_caps_reply__rx_method_fn *trace_caps_reply;
    intermon_mem_serv_iref_request__rx_method_fn *mem_serv_iref_request;
    intermon_mem_serv_iref_reply__rx_method_fn *mem_serv_iref_reply;
    intermon_ramfs_serv_iref_request__rx_method_fn *ramfs_serv_iref_request;
    intermon_ramfs_serv_iref_reply__rx_method_fn *ramfs_serv_iref_reply;
    intermon_name_serv_iref_request__rx_method_fn *name_serv_iref_request;
    intermon_name_serv_iref_reply__rx_method_fn *name_serv_iref_reply;
    intermon_monitor_mem_iref_request__rx_method_fn *monitor_mem_iref_request;
    intermon_monitor_mem_iref_reply__rx_method_fn *monitor_mem_iref_reply;
    intermon_bind_monitor_request__rx_method_fn *bind_monitor_request;
    intermon_bind_monitor_reply__rx_method_fn *bind_monitor_reply;
    intermon_bind_monitor_proxy__rx_method_fn *bind_monitor_proxy;
    intermon_bind_monitor_request_scc__rx_method_fn *bind_monitor_request_scc;
    intermon_bind_monitor_reply_scc__rx_method_fn *bind_monitor_reply_scc;
    intermon_bind_monitor_proxy_scc__rx_method_fn *bind_monitor_proxy_scc;
    intermon_bind_monitor_request_bmp__rx_method_fn *bind_monitor_request_bmp;
    intermon_bind_monitor_reply_bmp__rx_method_fn *bind_monitor_reply_bmp;
    intermon_bind_monitor_proxy_bmp__rx_method_fn *bind_monitor_proxy_bmp;
    intermon_new_monitor_notify__rx_method_fn *new_monitor_notify;
    intermon_bind_ump_request__rx_method_fn *bind_ump_request;
    intermon_bind_ump_reply__rx_method_fn *bind_ump_reply;
    intermon_cap_send_request__rx_method_fn *cap_send_request;
    intermon_span_domain_request__rx_method_fn *span_domain_request;
    intermon_span_domain_reply__rx_method_fn *span_domain_reply;
    intermon_rsrc_join__rx_method_fn *rsrc_join;
    intermon_rsrc_join_complete__rx_method_fn *rsrc_join_complete;
    intermon_rsrc_phase_data__rx_method_fn *rsrc_phase_data;
    intermon_rsrc_timer_sync__rx_method_fn *rsrc_timer_sync;
    intermon_rsrc_timer_sync_reply__rx_method_fn *rsrc_timer_sync_reply;
    intermon_rsrc_phase__rx_method_fn *rsrc_phase;
    intermon_multihop_routing_table_request__rx_method_fn *multihop_routing_table_request;
    intermon_multihop_routing_table_response__rx_method_fn *multihop_routing_table_response;
    intermon_multihop_routing_table_grow__rx_method_fn *multihop_routing_table_grow;
    intermon_bind_multihop_intermon_request__rx_method_fn *bind_multihop_intermon_request;
    intermon_bind_multihop_intermon_reply__rx_method_fn *bind_multihop_intermon_reply;
    intermon_multihop_message__rx_method_fn *multihop_message;
    intermon_multihop_cap_send__rx_method_fn *multihop_cap_send;
    intermon_trace_prepare__rx_method_fn *trace_prepare;
    intermon_trace_prepare_finished__rx_method_fn *trace_prepare_finished;
    intermon_trace_measure__rx_method_fn *trace_measure;
    intermon_trace_measure_ack__rx_method_fn *trace_measure_ack;
    intermon_bfscope_flush_send_forward__rx_method_fn *bfscope_flush_send_forward;
    intermon_bfscope_flush_ack_forward__rx_method_fn *bfscope_flush_ack_forward;
};

/*
 * Incoming connect callback type
 */
typedef  errval_t intermon_connect_fn(void *st, struct intermon_binding *binding);

/*
 * Export state struct
 */
struct intermon_export {
    struct idc_export common;
    intermon_connect_fn *connect_cb;
    struct waitset *waitset;
    void *st;
};

/*
 * Export function
 */
extern  errval_t intermon_export(void *st, idc_export_callback_fn *export_cb, intermon_connect_fn *connect_cb, struct waitset *ws, idc_export_flags_t flags);

/*
 * The Binding structure
 */
struct intermon_binding {
    /* Arbitrary user state pointer */
    void *st;
    
    /* Waitset used for receive handlers and send continuations */
    struct waitset *waitset;
    
    /* Mutex for the use of user code. */
    /* Must be held before any operation where there is a possibility of */
    /* concurrent access to the same binding (eg. multiple threads, or */
    /* asynchronous event handlers that use the same binding object). */
    struct event_mutex mutex;
    
    /* returns true iff a message could currently be accepted by the binding */
    intermon_can_send_fn *can_send;
    
    /* register an event for when a message is likely to be able to be sent */
    intermon_register_send_fn *register_send;
    
    /* change the waitset used by a binding */
    intermon_change_waitset_fn *change_waitset;
    
    /* perform control operations */
    intermon_control_fn *control;
    
    /* error handler for any async errors associated with this binding */
    /* must be filled-in by user */
    intermon_error_handler_fn *error_handler;
    
    /* Message send functions (filled in by binding) */
    struct intermon_tx_vtbl tx_vtbl;
    
    /* Incoming message handlers (filled in by user) */
    struct intermon_rx_vtbl rx_vtbl;
    
    /* Private state belonging to the binding implementation */
    union intermon_arg_union tx_union;
    union intermon_arg_union rx_union;
    struct waitset_chanstate register_chanstate;
    struct waitset_chanstate tx_cont_chanstate;
    enum intermon_msg_enum tx_msgnum;
    enum intermon_msg_enum rx_msgnum;
    int tx_msg_fragment;
    int rx_msg_fragment;
    size_t tx_str_pos;
    size_t rx_str_pos;
    size_t tx_str_len;
    size_t rx_str_len;
    struct event_queue_node event_qnode;
    intermon_bind_continuation_fn *bind_cont;
};

/*
 * Generic bind function
 */
extern  errval_t intermon_bind(iref_t i, intermon_bind_continuation_fn *_continuation, void *st, struct waitset *waitset, idc_bind_flags_t flags);

/*
 * Send wrappers
 */
static inline errval_t intermon_spawnd_image_request__tx(struct intermon_binding *_binding, struct event_closure _continuation) __attribute__ ((always_inline));
static inline errval_t intermon_spawnd_image_request__tx(struct intermon_binding *_binding, struct event_closure _continuation)
{
    return(((_binding->tx_vtbl).spawnd_image_request)(_binding, _continuation));
}

static inline errval_t intermon_spawnd_image_reply__tx(struct intermon_binding *_binding, struct event_closure _continuation, intermon_genpaddr_t base, uint32_t bytes) __attribute__ ((always_inline));
static inline errval_t intermon_spawnd_image_reply__tx(struct intermon_binding *_binding, struct event_closure _continuation, intermon_genpaddr_t base, uint32_t bytes)
{
    return(((_binding->tx_vtbl).spawnd_image_reply)(_binding, _continuation, base, bytes));
}

static inline errval_t intermon_monitor_initialized__tx(struct intermon_binding *_binding, struct event_closure _continuation) __attribute__ ((always_inline));
static inline errval_t intermon_monitor_initialized__tx(struct intermon_binding *_binding, struct event_closure _continuation)
{
    return(((_binding->tx_vtbl).monitor_initialized)(_binding, _continuation));
}

static inline errval_t intermon_trace_caps_request__tx(struct intermon_binding *_binding, struct event_closure _continuation) __attribute__ ((always_inline));
static inline errval_t intermon_trace_caps_request__tx(struct intermon_binding *_binding, struct event_closure _continuation)
{
    return(((_binding->tx_vtbl).trace_caps_request)(_binding, _continuation));
}

static inline errval_t intermon_trace_caps_reply__tx(struct intermon_binding *_binding, struct event_closure _continuation, intermon_caprep_t cap) __attribute__ ((always_inline));
static inline errval_t intermon_trace_caps_reply__tx(struct intermon_binding *_binding, struct event_closure _continuation, intermon_caprep_t cap)
{
    return(((_binding->tx_vtbl).trace_caps_reply)(_binding, _continuation, cap));
}

static inline errval_t intermon_mem_serv_iref_request__tx(struct intermon_binding *_binding, struct event_closure _continuation) __attribute__ ((always_inline));
static inline errval_t intermon_mem_serv_iref_request__tx(struct intermon_binding *_binding, struct event_closure _continuation)
{
    return(((_binding->tx_vtbl).mem_serv_iref_request)(_binding, _continuation));
}

static inline errval_t intermon_mem_serv_iref_reply__tx(struct intermon_binding *_binding, struct event_closure _continuation, iref_t iref) __attribute__ ((always_inline));
static inline errval_t intermon_mem_serv_iref_reply__tx(struct intermon_binding *_binding, struct event_closure _continuation, iref_t iref)
{
    return(((_binding->tx_vtbl).mem_serv_iref_reply)(_binding, _continuation, iref));
}

static inline errval_t intermon_ramfs_serv_iref_request__tx(struct intermon_binding *_binding, struct event_closure _continuation) __attribute__ ((always_inline));
static inline errval_t intermon_ramfs_serv_iref_request__tx(struct intermon_binding *_binding, struct event_closure _continuation)
{
    return(((_binding->tx_vtbl).ramfs_serv_iref_request)(_binding, _continuation));
}

static inline errval_t intermon_ramfs_serv_iref_reply__tx(struct intermon_binding *_binding, struct event_closure _continuation, iref_t iref) __attribute__ ((always_inline));
static inline errval_t intermon_ramfs_serv_iref_reply__tx(struct intermon_binding *_binding, struct event_closure _continuation, iref_t iref)
{
    return(((_binding->tx_vtbl).ramfs_serv_iref_reply)(_binding, _continuation, iref));
}

static inline errval_t intermon_name_serv_iref_request__tx(struct intermon_binding *_binding, struct event_closure _continuation) __attribute__ ((always_inline));
static inline errval_t intermon_name_serv_iref_request__tx(struct intermon_binding *_binding, struct event_closure _continuation)
{
    return(((_binding->tx_vtbl).name_serv_iref_request)(_binding, _continuation));
}

static inline errval_t intermon_name_serv_iref_reply__tx(struct intermon_binding *_binding, struct event_closure _continuation, iref_t iref) __attribute__ ((always_inline));
static inline errval_t intermon_name_serv_iref_reply__tx(struct intermon_binding *_binding, struct event_closure _continuation, iref_t iref)
{
    return(((_binding->tx_vtbl).name_serv_iref_reply)(_binding, _continuation, iref));
}

static inline errval_t intermon_monitor_mem_iref_request__tx(struct intermon_binding *_binding, struct event_closure _continuation) __attribute__ ((always_inline));
static inline errval_t intermon_monitor_mem_iref_request__tx(struct intermon_binding *_binding, struct event_closure _continuation)
{
    return(((_binding->tx_vtbl).monitor_mem_iref_request)(_binding, _continuation));
}

static inline errval_t intermon_monitor_mem_iref_reply__tx(struct intermon_binding *_binding, struct event_closure _continuation, iref_t iref) __attribute__ ((always_inline));
static inline errval_t intermon_monitor_mem_iref_reply__tx(struct intermon_binding *_binding, struct event_closure _continuation, iref_t iref)
{
    return(((_binding->tx_vtbl).monitor_mem_iref_reply)(_binding, _continuation, iref));
}

static inline errval_t intermon_bind_monitor_request__tx(struct intermon_binding *_binding, struct event_closure _continuation, intermon_coreid_t_t core_id, intermon_caprep_t cap) __attribute__ ((always_inline));
static inline errval_t intermon_bind_monitor_request__tx(struct intermon_binding *_binding, struct event_closure _continuation, intermon_coreid_t_t core_id, intermon_caprep_t cap)
{
    return(((_binding->tx_vtbl).bind_monitor_request)(_binding, _continuation, core_id, cap));
}

static inline errval_t intermon_bind_monitor_reply__tx(struct intermon_binding *_binding, struct event_closure _continuation, intermon_errval_t err) __attribute__ ((always_inline));
static inline errval_t intermon_bind_monitor_reply__tx(struct intermon_binding *_binding, struct event_closure _continuation, intermon_errval_t err)
{
    return(((_binding->tx_vtbl).bind_monitor_reply)(_binding, _continuation, err));
}

static inline errval_t intermon_bind_monitor_proxy__tx(struct intermon_binding *_binding, struct event_closure _continuation, intermon_coreid_t_t dst_core_id, intermon_caprep_t cap) __attribute__ ((always_inline));
static inline errval_t intermon_bind_monitor_proxy__tx(struct intermon_binding *_binding, struct event_closure _continuation, intermon_coreid_t_t dst_core_id, intermon_caprep_t cap)
{
    return(((_binding->tx_vtbl).bind_monitor_proxy)(_binding, _continuation, dst_core_id, cap));
}

static inline errval_t intermon_bind_monitor_request_scc__tx(struct intermon_binding *_binding, struct event_closure _continuation, intermon_coreid_t_t core_id, intermon_caprep_t cap, intermon_chanid_t_t chan_id, intermon_coreid_t_t from_core_id) __attribute__ ((always_inline));
static inline errval_t intermon_bind_monitor_request_scc__tx(struct intermon_binding *_binding, struct event_closure _continuation, intermon_coreid_t_t core_id, intermon_caprep_t cap, intermon_chanid_t_t chan_id, intermon_coreid_t_t from_core_id)
{
    return(((_binding->tx_vtbl).bind_monitor_request_scc)(_binding, _continuation, core_id, cap, chan_id, from_core_id));
}

static inline errval_t intermon_bind_monitor_reply_scc__tx(struct intermon_binding *_binding, struct event_closure _continuation, intermon_errval_t err, intermon_chanid_t_t chan_id, intermon_coreid_t_t core_id) __attribute__ ((always_inline));
static inline errval_t intermon_bind_monitor_reply_scc__tx(struct intermon_binding *_binding, struct event_closure _continuation, intermon_errval_t err, intermon_chanid_t_t chan_id, intermon_coreid_t_t core_id)
{
    return(((_binding->tx_vtbl).bind_monitor_reply_scc)(_binding, _continuation, err, chan_id, core_id));
}

static inline errval_t intermon_bind_monitor_proxy_scc__tx(struct intermon_binding *_binding, struct event_closure _continuation, intermon_coreid_t_t dst_core_id, intermon_caprep_t cap, intermon_chanid_t_t chan_id, intermon_coreid_t_t core_id) __attribute__ ((always_inline));
static inline errval_t intermon_bind_monitor_proxy_scc__tx(struct intermon_binding *_binding, struct event_closure _continuation, intermon_coreid_t_t dst_core_id, intermon_caprep_t cap, intermon_chanid_t_t chan_id, intermon_coreid_t_t core_id)
{
    return(((_binding->tx_vtbl).bind_monitor_proxy_scc)(_binding, _continuation, dst_core_id, cap, chan_id, core_id));
}

static inline errval_t intermon_bind_monitor_request_bmp__tx(struct intermon_binding *_binding, struct event_closure _continuation, intermon_coreid_t_t core_id, intermon_chanid_t_t chan_id, intermon_coreid_t_t from_core_id) __attribute__ ((always_inline));
static inline errval_t intermon_bind_monitor_request_bmp__tx(struct intermon_binding *_binding, struct event_closure _continuation, intermon_coreid_t_t core_id, intermon_chanid_t_t chan_id, intermon_coreid_t_t from_core_id)
{
    return(((_binding->tx_vtbl).bind_monitor_request_bmp)(_binding, _continuation, core_id, chan_id, from_core_id));
}

static inline errval_t intermon_bind_monitor_reply_bmp__tx(struct intermon_binding *_binding, struct event_closure _continuation, intermon_errval_t err, intermon_chanid_t_t chan_id, intermon_coreid_t_t core_id) __attribute__ ((always_inline));
static inline errval_t intermon_bind_monitor_reply_bmp__tx(struct intermon_binding *_binding, struct event_closure _continuation, intermon_errval_t err, intermon_chanid_t_t chan_id, intermon_coreid_t_t core_id)
{
    return(((_binding->tx_vtbl).bind_monitor_reply_bmp)(_binding, _continuation, err, chan_id, core_id));
}

static inline errval_t intermon_bind_monitor_proxy_bmp__tx(struct intermon_binding *_binding, struct event_closure _continuation, intermon_coreid_t_t dst_core_id, intermon_chanid_t_t chan_id, intermon_coreid_t_t core_id) __attribute__ ((always_inline));
static inline errval_t intermon_bind_monitor_proxy_bmp__tx(struct intermon_binding *_binding, struct event_closure _continuation, intermon_coreid_t_t dst_core_id, intermon_chanid_t_t chan_id, intermon_coreid_t_t core_id)
{
    return(((_binding->tx_vtbl).bind_monitor_proxy_bmp)(_binding, _continuation, dst_core_id, chan_id, core_id));
}

static inline errval_t intermon_new_monitor_notify__tx(struct intermon_binding *_binding, struct event_closure _continuation, intermon_coreid_t_t core_id) __attribute__ ((always_inline));
static inline errval_t intermon_new_monitor_notify__tx(struct intermon_binding *_binding, struct event_closure _continuation, intermon_coreid_t_t core_id)
{
    return(((_binding->tx_vtbl).new_monitor_notify)(_binding, _continuation, core_id));
}

static inline errval_t intermon_bind_ump_request__tx(struct intermon_binding *_binding, struct event_closure _continuation, iref_t iref, intermon_mon_id_t_t mon_id, uint32_t channel_length_in, uint32_t channel_length_out, intermon_genpaddr_t framebase, uint8_t framebits, intermon_caprep_t notify) __attribute__ ((always_inline));
static inline errval_t intermon_bind_ump_request__tx(struct intermon_binding *_binding, struct event_closure _continuation, iref_t iref, intermon_mon_id_t_t mon_id, uint32_t channel_length_in, uint32_t channel_length_out, intermon_genpaddr_t framebase, uint8_t framebits, intermon_caprep_t notify)
{
    return(((_binding->tx_vtbl).bind_ump_request)(_binding, _continuation, iref, mon_id, channel_length_in, channel_length_out, framebase, framebits, notify));
}

static inline errval_t intermon_bind_ump_reply__tx(struct intermon_binding *_binding, struct event_closure _continuation, intermon_con_id_t_t con_id, intermon_mon_id_t_t mon_id, intermon_errval_t err, intermon_caprep_t notify) __attribute__ ((always_inline));
static inline errval_t intermon_bind_ump_reply__tx(struct intermon_binding *_binding, struct event_closure _continuation, intermon_con_id_t_t con_id, intermon_mon_id_t_t mon_id, intermon_errval_t err, intermon_caprep_t notify)
{
    return(((_binding->tx_vtbl).bind_ump_reply)(_binding, _continuation, con_id, mon_id, err, notify));
}

static inline errval_t intermon_cap_send_request__tx(struct intermon_binding *_binding, struct event_closure _continuation, intermon_con_id_t_t con_id, intermon_capid_t_t capid, intermon_caprep_t cap, intermon_errval_t err, bool give_away, bool has_descendents, intermon_coremask_t on_cores, bool null_cap) __attribute__ ((always_inline));
static inline errval_t intermon_cap_send_request__tx(struct intermon_binding *_binding, struct event_closure _continuation, intermon_con_id_t_t con_id, intermon_capid_t_t capid, intermon_caprep_t cap, intermon_errval_t err, bool give_away, bool has_descendents, intermon_coremask_t on_cores, bool null_cap)
{
    return(((_binding->tx_vtbl).cap_send_request)(_binding, _continuation, con_id, capid, cap, err, give_away, has_descendents, on_cores, null_cap));
}

static inline errval_t intermon_span_domain_request__tx(struct intermon_binding *_binding, struct event_closure _continuation, intermon_state_id_t_t state_id, intermon_genpaddr_t vnodebase, intermon_genpaddr_t framebase, uint8_t framebits) __attribute__ ((always_inline));
static inline errval_t intermon_span_domain_request__tx(struct intermon_binding *_binding, struct event_closure _continuation, intermon_state_id_t_t state_id, intermon_genpaddr_t vnodebase, intermon_genpaddr_t framebase, uint8_t framebits)
{
    return(((_binding->tx_vtbl).span_domain_request)(_binding, _continuation, state_id, vnodebase, framebase, framebits));
}

static inline errval_t intermon_span_domain_reply__tx(struct intermon_binding *_binding, struct event_closure _continuation, intermon_state_id_t_t state_id, intermon_errval_t err) __attribute__ ((always_inline));
static inline errval_t intermon_span_domain_reply__tx(struct intermon_binding *_binding, struct event_closure _continuation, intermon_state_id_t_t state_id, intermon_errval_t err)
{
    return(((_binding->tx_vtbl).span_domain_reply)(_binding, _continuation, state_id, err));
}

static inline errval_t intermon_rsrc_join__tx(struct intermon_binding *_binding, struct event_closure _continuation, intermon_rsrcid_t id, intermon_coreid_t_t coreid) __attribute__ ((always_inline));
static inline errval_t intermon_rsrc_join__tx(struct intermon_binding *_binding, struct event_closure _continuation, intermon_rsrcid_t id, intermon_coreid_t_t coreid)
{
    return(((_binding->tx_vtbl).rsrc_join)(_binding, _continuation, id, coreid));
}

static inline errval_t intermon_rsrc_join_complete__tx(struct intermon_binding *_binding, struct event_closure _continuation, intermon_rsrcid_t id) __attribute__ ((always_inline));
static inline errval_t intermon_rsrc_join_complete__tx(struct intermon_binding *_binding, struct event_closure _continuation, intermon_rsrcid_t id)
{
    return(((_binding->tx_vtbl).rsrc_join_complete)(_binding, _continuation, id));
}

static inline errval_t intermon_rsrc_phase_data__tx(struct intermon_binding *_binding, struct event_closure _continuation, intermon_rsrcid_t id, uint32_t phase, const uint8_t *data, size_t len) __attribute__ ((always_inline));
static inline errval_t intermon_rsrc_phase_data__tx(struct intermon_binding *_binding, struct event_closure _continuation, intermon_rsrcid_t id, uint32_t phase, const uint8_t *data, size_t len)
{
    return(((_binding->tx_vtbl).rsrc_phase_data)(_binding, _continuation, id, phase, data, len));
}

static inline errval_t intermon_rsrc_timer_sync__tx(struct intermon_binding *_binding, struct event_closure _continuation, uint64_t timestamp) __attribute__ ((always_inline));
static inline errval_t intermon_rsrc_timer_sync__tx(struct intermon_binding *_binding, struct event_closure _continuation, uint64_t timestamp)
{
    return(((_binding->tx_vtbl).rsrc_timer_sync)(_binding, _continuation, timestamp));
}

static inline errval_t intermon_rsrc_timer_sync_reply__tx(struct intermon_binding *_binding, struct event_closure _continuation, intermon_errval_t err) __attribute__ ((always_inline));
static inline errval_t intermon_rsrc_timer_sync_reply__tx(struct intermon_binding *_binding, struct event_closure _continuation, intermon_errval_t err)
{
    return(((_binding->tx_vtbl).rsrc_timer_sync_reply)(_binding, _continuation, err));
}

static inline errval_t intermon_rsrc_phase__tx(struct intermon_binding *_binding, struct event_closure _continuation, intermon_rsrcid_t id, uint32_t phase, uint64_t timestamp) __attribute__ ((always_inline));
static inline errval_t intermon_rsrc_phase__tx(struct intermon_binding *_binding, struct event_closure _continuation, intermon_rsrcid_t id, uint32_t phase, uint64_t timestamp)
{
    return(((_binding->tx_vtbl).rsrc_phase)(_binding, _continuation, id, phase, timestamp));
}

static inline errval_t intermon_multihop_routing_table_request__tx(struct intermon_binding *_binding, struct event_closure _continuation, intermon_coreid_t source_coreid) __attribute__ ((always_inline));
static inline errval_t intermon_multihop_routing_table_request__tx(struct intermon_binding *_binding, struct event_closure _continuation, intermon_coreid_t source_coreid)
{
    return(((_binding->tx_vtbl).multihop_routing_table_request)(_binding, _continuation, source_coreid));
}

static inline errval_t intermon_multihop_routing_table_response__tx(struct intermon_binding *_binding, struct event_closure _continuation, intermon_errval_t err, intermon_coreid_t source_coreid, intermon_coreid_t max_coreid, const intermon_coreid_t *to, size_t len) __attribute__ ((always_inline));
static inline errval_t intermon_multihop_routing_table_response__tx(struct intermon_binding *_binding, struct event_closure _continuation, intermon_errval_t err, intermon_coreid_t source_coreid, intermon_coreid_t max_coreid, const intermon_coreid_t *to, size_t len)
{
    return(((_binding->tx_vtbl).multihop_routing_table_response)(_binding, _continuation, err, source_coreid, max_coreid, to, len));
}

static inline errval_t intermon_multihop_routing_table_grow__tx(struct intermon_binding *_binding, struct event_closure _continuation, intermon_coreid_t forwarder, const intermon_coreid_t *destinations, size_t len) __attribute__ ((always_inline));
static inline errval_t intermon_multihop_routing_table_grow__tx(struct intermon_binding *_binding, struct event_closure _continuation, intermon_coreid_t forwarder, const intermon_coreid_t *destinations, size_t len)
{
    return(((_binding->tx_vtbl).multihop_routing_table_grow)(_binding, _continuation, forwarder, destinations, len));
}

static inline errval_t intermon_bind_multihop_intermon_request__tx(struct intermon_binding *_binding, struct event_closure _continuation, iref_t iref, intermon_vci_t_t sender_vci, intermon_coreid_t core_id) __attribute__ ((always_inline));
static inline errval_t intermon_bind_multihop_intermon_request__tx(struct intermon_binding *_binding, struct event_closure _continuation, iref_t iref, intermon_vci_t_t sender_vci, intermon_coreid_t core_id)
{
    return(((_binding->tx_vtbl).bind_multihop_intermon_request)(_binding, _continuation, iref, sender_vci, core_id));
}

static inline errval_t intermon_bind_multihop_intermon_reply__tx(struct intermon_binding *_binding, struct event_closure _continuation, intermon_vci_t_t receiver_vci, intermon_vci_t_t sender_vci, intermon_errval_t err) __attribute__ ((always_inline));
static inline errval_t intermon_bind_multihop_intermon_reply__tx(struct intermon_binding *_binding, struct event_closure _continuation, intermon_vci_t_t receiver_vci, intermon_vci_t_t sender_vci, intermon_errval_t err)
{
    return(((_binding->tx_vtbl).bind_multihop_intermon_reply)(_binding, _continuation, receiver_vci, sender_vci, err));
}

static inline errval_t intermon_multihop_message__tx(struct intermon_binding *_binding, struct event_closure _continuation, intermon_vci_t_t vci, uint8_t direction, uint8_t flags, uint32_t ack, const uint8_t *payload, size_t size) __attribute__ ((always_inline));
static inline errval_t intermon_multihop_message__tx(struct intermon_binding *_binding, struct event_closure _continuation, intermon_vci_t_t vci, uint8_t direction, uint8_t flags, uint32_t ack, const uint8_t *payload, size_t size)
{
    return(((_binding->tx_vtbl).multihop_message)(_binding, _continuation, vci, direction, flags, ack, payload, size));
}

static inline errval_t intermon_multihop_cap_send__tx(struct intermon_binding *_binding, struct event_closure _continuation, intermon_vci_t_t vci, uint8_t direction, intermon_capid_t_t capid, intermon_errval_t err, intermon_caprep_t cap, bool null_cap) __attribute__ ((always_inline));
static inline errval_t intermon_multihop_cap_send__tx(struct intermon_binding *_binding, struct event_closure _continuation, intermon_vci_t_t vci, uint8_t direction, intermon_capid_t_t capid, intermon_errval_t err, intermon_caprep_t cap, bool null_cap)
{
    return(((_binding->tx_vtbl).multihop_cap_send)(_binding, _continuation, vci, direction, capid, err, cap, null_cap));
}

static inline errval_t intermon_trace_prepare__tx(struct intermon_binding *_binding, struct event_closure _continuation, intermon_coreid_t origin_core) __attribute__ ((always_inline));
static inline errval_t intermon_trace_prepare__tx(struct intermon_binding *_binding, struct event_closure _continuation, intermon_coreid_t origin_core)
{
    return(((_binding->tx_vtbl).trace_prepare)(_binding, _continuation, origin_core));
}

static inline errval_t intermon_trace_prepare_finished__tx(struct intermon_binding *_binding, struct event_closure _continuation) __attribute__ ((always_inline));
static inline errval_t intermon_trace_prepare_finished__tx(struct intermon_binding *_binding, struct event_closure _continuation)
{
    return(((_binding->tx_vtbl).trace_prepare_finished)(_binding, _continuation));
}

static inline errval_t intermon_trace_measure__tx(struct intermon_binding *_binding, struct event_closure _continuation, intermon_coreid_t_t origin_core, uint64_t t0) __attribute__ ((always_inline));
static inline errval_t intermon_trace_measure__tx(struct intermon_binding *_binding, struct event_closure _continuation, intermon_coreid_t_t origin_core, uint64_t t0)
{
    return(((_binding->tx_vtbl).trace_measure)(_binding, _continuation, origin_core, t0));
}

static inline errval_t intermon_trace_measure_ack__tx(struct intermon_binding *_binding, struct event_closure _continuation, intermon_coreid_t origin_core, uint64_t t0, uint64_t t1, uint64_t t2) __attribute__ ((always_inline));
static inline errval_t intermon_trace_measure_ack__tx(struct intermon_binding *_binding, struct event_closure _continuation, intermon_coreid_t origin_core, uint64_t t0, uint64_t t1, uint64_t t2)
{
    return(((_binding->tx_vtbl).trace_measure_ack)(_binding, _continuation, origin_core, t0, t1, t2));
}

static inline errval_t intermon_bfscope_flush_send_forward__tx(struct intermon_binding *_binding, struct event_closure _continuation, iref_t iref) __attribute__ ((always_inline));
static inline errval_t intermon_bfscope_flush_send_forward__tx(struct intermon_binding *_binding, struct event_closure _continuation, iref_t iref)
{
    return(((_binding->tx_vtbl).bfscope_flush_send_forward)(_binding, _continuation, iref));
}

static inline errval_t intermon_bfscope_flush_ack_forward__tx(struct intermon_binding *_binding, struct event_closure _continuation) __attribute__ ((always_inline));
static inline errval_t intermon_bfscope_flush_ack_forward__tx(struct intermon_binding *_binding, struct event_closure _continuation)
{
    return(((_binding->tx_vtbl).bfscope_flush_ack_forward)(_binding, _continuation));
}


/*
 * Backend-specific includes
 */
#ifdef CONFIG_FLOUNDER_BACKEND_LMP
#include <if/intermon_lmp_defs.h>
#endif // CONFIG_FLOUNDER_BACKEND_LMP
#ifdef CONFIG_FLOUNDER_BACKEND_UMP
#include <if/intermon_ump_defs.h>
#endif // CONFIG_FLOUNDER_BACKEND_UMP
#ifdef CONFIG_FLOUNDER_BACKEND_UMP_IPI
#include <if/intermon_ump_ipi_defs.h>
#endif // CONFIG_FLOUNDER_BACKEND_UMP_IPI
#ifdef CONFIG_FLOUNDER_BACKEND_MULTIHOP
#include <if/intermon_multihop_defs.h>
#endif // CONFIG_FLOUNDER_BACKEND_MULTIHOP
/*
 * And we're done
 */
#endif // __intermon_IF_H
