#ifndef __e10k_q_DEV_H
#define __e10k_q_DEV_H 1
/*
 * DEVICE DEFINITION: Intel 82599 10 GbE Controller Queues
 * 
 * Copyright (c) 2010, ETH Zurich.
 * All rights reserved.
 * 
 * This file is distributed under the terms in the attached LICENSE
 * file. If you do not find this file, copies can be found by
 * writing to:
 * ETH Zurich D-INFK, Universitaetstr. 6, CH-8092 Zurich.
 * Attn: Systems Group.
 * 
 * THIS FILE IS AUTOMATICALLY GENERATED BY MACKEREL: DO NOT EDIT!
 */
#include <mackerel/mackerel.h>
#include <inttypes.h>
#undef __DN
#define __DN(x) e10k_q ## _ ## x
/*
 * Data type: e10k_q_rdesc_legacy_t
 * Description: Legacy Receive Descriptor
 * Fields:
 *   buffer	(size 64, offset 0, init 0):	RW	Buffer Address
 *   length	(size 16, offset 64, init 0):	RW	Length Field
 *   checksum	(size 16, offset 80, init 0):	RW	Fragment Checksum
 *   dd	(size 1, offset 96, init 0):	RW	Descriptor Done
 *   eop	(size 1, offset 97, init 0):	RW	End of Packet
 *   _anon98	(size 1, offset 98, init 0):	RSVD	_
 *   vp	(size 1, offset 99, init 0):	RW	VLAN Packet
 *   udpcs	(size 1, offset 100, init 0):	RW	UDP Checksum
 *   l4cs	(size 1, offset 101, init 0):	RW	L4 Checksum
 *   ipcs	(size 1, offset 102, init 0):	RW	Ipv4 Checksum
 *   pif	(size 1, offset 103, init 0):	RW	Non Unicast Address
 *   rxe	(size 1, offset 104, init 0):	RW	MAC error
 *   _anon105	(size 5, offset 105, init 0):	RSVD	_
 *   tcpe	(size 1, offset 110, init 0):	RW	TCP/UDP Checksum Error
 *   ipe	(size 1, offset 111, init 0):	RW	Ipv4 Checksum Error
 *   vlan_tag	(size 16, offset 112, init 0):	RW	VLAN Tag
 */
typedef uint8_t *e10k_q_rdesc_legacy_t;
typedef uint8_t e10k_q_rdesc_legacy_array_t[16];
static const size_t e10k_q_rdesc_legacy_size = sizeof(e10k_q_rdesc_legacy_array_t );
static inline uint64_t e10k_q_rdesc_legacy_buffer_extract(e10k_q_rdesc_legacy_t _dtptr) __attribute__ ((always_inline));
static inline uint64_t e10k_q_rdesc_legacy_buffer_extract(e10k_q_rdesc_legacy_t _dtptr)
{
    return(((*((uint64_t *)(0 + _dtptr))) & 0xffffffffffffffff) >> 0);
}

static inline void e10k_q_rdesc_legacy_buffer_insert(e10k_q_rdesc_legacy_t _dtptr, uint64_t _fieldval) __attribute__ ((always_inline));
static inline void e10k_q_rdesc_legacy_buffer_insert(e10k_q_rdesc_legacy_t _dtptr, uint64_t _fieldval)
{
    *((uint64_t *)(0 + _dtptr)) = (((*((uint64_t *)(0 + _dtptr))) & 0x0) | (0xffffffffffffffff & (_fieldval << 0)));
}

static inline uint16_t e10k_q_rdesc_legacy_length_extract(e10k_q_rdesc_legacy_t _dtptr) __attribute__ ((always_inline));
static inline uint16_t e10k_q_rdesc_legacy_length_extract(e10k_q_rdesc_legacy_t _dtptr)
{
    return(((*((uint16_t *)(8 + _dtptr))) & 0xffff) >> 0);
}

static inline void e10k_q_rdesc_legacy_length_insert(e10k_q_rdesc_legacy_t _dtptr, uint16_t _fieldval) __attribute__ ((always_inline));
static inline void e10k_q_rdesc_legacy_length_insert(e10k_q_rdesc_legacy_t _dtptr, uint16_t _fieldval)
{
    *((uint16_t *)(8 + _dtptr)) = (((*((uint16_t *)(8 + _dtptr))) & 0x0) | (0xffff & (_fieldval << 0)));
}

static inline uint16_t e10k_q_rdesc_legacy_checksum_extract(e10k_q_rdesc_legacy_t _dtptr) __attribute__ ((always_inline));
static inline uint16_t e10k_q_rdesc_legacy_checksum_extract(e10k_q_rdesc_legacy_t _dtptr)
{
    return(((*((uint16_t *)(10 + _dtptr))) & 0xffff) >> 0);
}

static inline void e10k_q_rdesc_legacy_checksum_insert(e10k_q_rdesc_legacy_t _dtptr, uint16_t _fieldval) __attribute__ ((always_inline));
static inline void e10k_q_rdesc_legacy_checksum_insert(e10k_q_rdesc_legacy_t _dtptr, uint16_t _fieldval)
{
    *((uint16_t *)(10 + _dtptr)) = (((*((uint16_t *)(10 + _dtptr))) & 0x0) | (0xffff & (_fieldval << 0)));
}

static inline uint8_t e10k_q_rdesc_legacy_dd_extract(e10k_q_rdesc_legacy_t _dtptr) __attribute__ ((always_inline));
static inline uint8_t e10k_q_rdesc_legacy_dd_extract(e10k_q_rdesc_legacy_t _dtptr)
{
    return(((*((uint8_t *)(12 + _dtptr))) & 0x1) >> 0);
}

static inline void e10k_q_rdesc_legacy_dd_insert(e10k_q_rdesc_legacy_t _dtptr, uint8_t _fieldval) __attribute__ ((always_inline));
static inline void e10k_q_rdesc_legacy_dd_insert(e10k_q_rdesc_legacy_t _dtptr, uint8_t _fieldval)
{
    *((uint8_t *)(12 + _dtptr)) = (((*((uint8_t *)(12 + _dtptr))) & 0xfe) | (0x1 & (_fieldval << 0)));
}

static inline uint8_t e10k_q_rdesc_legacy_eop_extract(e10k_q_rdesc_legacy_t _dtptr) __attribute__ ((always_inline));
static inline uint8_t e10k_q_rdesc_legacy_eop_extract(e10k_q_rdesc_legacy_t _dtptr)
{
    return(((*((uint8_t *)(12 + _dtptr))) & 0x2) >> 1);
}

static inline void e10k_q_rdesc_legacy_eop_insert(e10k_q_rdesc_legacy_t _dtptr, uint8_t _fieldval) __attribute__ ((always_inline));
static inline void e10k_q_rdesc_legacy_eop_insert(e10k_q_rdesc_legacy_t _dtptr, uint8_t _fieldval)
{
    *((uint8_t *)(12 + _dtptr)) = (((*((uint8_t *)(12 + _dtptr))) & 0xfd) | (0x2 & (_fieldval << 1)));
}

static inline uint8_t e10k_q_rdesc_legacy_vp_extract(e10k_q_rdesc_legacy_t _dtptr) __attribute__ ((always_inline));
static inline uint8_t e10k_q_rdesc_legacy_vp_extract(e10k_q_rdesc_legacy_t _dtptr)
{
    return(((*((uint8_t *)(12 + _dtptr))) & 0x8) >> 3);
}

static inline void e10k_q_rdesc_legacy_vp_insert(e10k_q_rdesc_legacy_t _dtptr, uint8_t _fieldval) __attribute__ ((always_inline));
static inline void e10k_q_rdesc_legacy_vp_insert(e10k_q_rdesc_legacy_t _dtptr, uint8_t _fieldval)
{
    *((uint8_t *)(12 + _dtptr)) = (((*((uint8_t *)(12 + _dtptr))) & 0xf7) | (0x8 & (_fieldval << 3)));
}

static inline uint8_t e10k_q_rdesc_legacy_udpcs_extract(e10k_q_rdesc_legacy_t _dtptr) __attribute__ ((always_inline));
static inline uint8_t e10k_q_rdesc_legacy_udpcs_extract(e10k_q_rdesc_legacy_t _dtptr)
{
    return(((*((uint8_t *)(12 + _dtptr))) & 0x10) >> 4);
}

static inline void e10k_q_rdesc_legacy_udpcs_insert(e10k_q_rdesc_legacy_t _dtptr, uint8_t _fieldval) __attribute__ ((always_inline));
static inline void e10k_q_rdesc_legacy_udpcs_insert(e10k_q_rdesc_legacy_t _dtptr, uint8_t _fieldval)
{
    *((uint8_t *)(12 + _dtptr)) = (((*((uint8_t *)(12 + _dtptr))) & 0xef) | (0x10 & (_fieldval << 4)));
}

static inline uint8_t e10k_q_rdesc_legacy_l4cs_extract(e10k_q_rdesc_legacy_t _dtptr) __attribute__ ((always_inline));
static inline uint8_t e10k_q_rdesc_legacy_l4cs_extract(e10k_q_rdesc_legacy_t _dtptr)
{
    return(((*((uint8_t *)(12 + _dtptr))) & 0x20) >> 5);
}

static inline void e10k_q_rdesc_legacy_l4cs_insert(e10k_q_rdesc_legacy_t _dtptr, uint8_t _fieldval) __attribute__ ((always_inline));
static inline void e10k_q_rdesc_legacy_l4cs_insert(e10k_q_rdesc_legacy_t _dtptr, uint8_t _fieldval)
{
    *((uint8_t *)(12 + _dtptr)) = (((*((uint8_t *)(12 + _dtptr))) & 0xdf) | (0x20 & (_fieldval << 5)));
}

static inline uint8_t e10k_q_rdesc_legacy_ipcs_extract(e10k_q_rdesc_legacy_t _dtptr) __attribute__ ((always_inline));
static inline uint8_t e10k_q_rdesc_legacy_ipcs_extract(e10k_q_rdesc_legacy_t _dtptr)
{
    return(((*((uint8_t *)(12 + _dtptr))) & 0x40) >> 6);
}

static inline void e10k_q_rdesc_legacy_ipcs_insert(e10k_q_rdesc_legacy_t _dtptr, uint8_t _fieldval) __attribute__ ((always_inline));
static inline void e10k_q_rdesc_legacy_ipcs_insert(e10k_q_rdesc_legacy_t _dtptr, uint8_t _fieldval)
{
    *((uint8_t *)(12 + _dtptr)) = (((*((uint8_t *)(12 + _dtptr))) & 0xbf) | (0x40 & (_fieldval << 6)));
}

static inline uint8_t e10k_q_rdesc_legacy_pif_extract(e10k_q_rdesc_legacy_t _dtptr) __attribute__ ((always_inline));
static inline uint8_t e10k_q_rdesc_legacy_pif_extract(e10k_q_rdesc_legacy_t _dtptr)
{
    return(((*((uint8_t *)(12 + _dtptr))) & 0x80) >> 7);
}

static inline void e10k_q_rdesc_legacy_pif_insert(e10k_q_rdesc_legacy_t _dtptr, uint8_t _fieldval) __attribute__ ((always_inline));
static inline void e10k_q_rdesc_legacy_pif_insert(e10k_q_rdesc_legacy_t _dtptr, uint8_t _fieldval)
{
    *((uint8_t *)(12 + _dtptr)) = (((*((uint8_t *)(12 + _dtptr))) & 0x7f) | (0x80 & (_fieldval << 7)));
}

static inline uint8_t e10k_q_rdesc_legacy_rxe_extract(e10k_q_rdesc_legacy_t _dtptr) __attribute__ ((always_inline));
static inline uint8_t e10k_q_rdesc_legacy_rxe_extract(e10k_q_rdesc_legacy_t _dtptr)
{
    return(((*((uint8_t *)(13 + _dtptr))) & 0x1) >> 0);
}

static inline void e10k_q_rdesc_legacy_rxe_insert(e10k_q_rdesc_legacy_t _dtptr, uint8_t _fieldval) __attribute__ ((always_inline));
static inline void e10k_q_rdesc_legacy_rxe_insert(e10k_q_rdesc_legacy_t _dtptr, uint8_t _fieldval)
{
    *((uint8_t *)(13 + _dtptr)) = (((*((uint8_t *)(13 + _dtptr))) & 0xfe) | (0x1 & (_fieldval << 0)));
}

static inline uint8_t e10k_q_rdesc_legacy_tcpe_extract(e10k_q_rdesc_legacy_t _dtptr) __attribute__ ((always_inline));
static inline uint8_t e10k_q_rdesc_legacy_tcpe_extract(e10k_q_rdesc_legacy_t _dtptr)
{
    return(((*((uint8_t *)(13 + _dtptr))) & 0x40) >> 6);
}

static inline void e10k_q_rdesc_legacy_tcpe_insert(e10k_q_rdesc_legacy_t _dtptr, uint8_t _fieldval) __attribute__ ((always_inline));
static inline void e10k_q_rdesc_legacy_tcpe_insert(e10k_q_rdesc_legacy_t _dtptr, uint8_t _fieldval)
{
    *((uint8_t *)(13 + _dtptr)) = (((*((uint8_t *)(13 + _dtptr))) & 0xbf) | (0x40 & (_fieldval << 6)));
}

static inline uint8_t e10k_q_rdesc_legacy_ipe_extract(e10k_q_rdesc_legacy_t _dtptr) __attribute__ ((always_inline));
static inline uint8_t e10k_q_rdesc_legacy_ipe_extract(e10k_q_rdesc_legacy_t _dtptr)
{
    return(((*((uint8_t *)(13 + _dtptr))) & 0x80) >> 7);
}

static inline void e10k_q_rdesc_legacy_ipe_insert(e10k_q_rdesc_legacy_t _dtptr, uint8_t _fieldval) __attribute__ ((always_inline));
static inline void e10k_q_rdesc_legacy_ipe_insert(e10k_q_rdesc_legacy_t _dtptr, uint8_t _fieldval)
{
    *((uint8_t *)(13 + _dtptr)) = (((*((uint8_t *)(13 + _dtptr))) & 0x7f) | (0x80 & (_fieldval << 7)));
}

static inline uint16_t e10k_q_rdesc_legacy_vlan_tag_extract(e10k_q_rdesc_legacy_t _dtptr) __attribute__ ((always_inline));
static inline uint16_t e10k_q_rdesc_legacy_vlan_tag_extract(e10k_q_rdesc_legacy_t _dtptr)
{
    return(((*((uint16_t *)(14 + _dtptr))) & 0xffff) >> 0);
}

static inline void e10k_q_rdesc_legacy_vlan_tag_insert(e10k_q_rdesc_legacy_t _dtptr, uint16_t _fieldval) __attribute__ ((always_inline));
static inline void e10k_q_rdesc_legacy_vlan_tag_insert(e10k_q_rdesc_legacy_t _dtptr, uint16_t _fieldval)
{
    *((uint16_t *)(14 + _dtptr)) = (((*((uint16_t *)(14 + _dtptr))) & 0x0) | (0xffff & (_fieldval << 0)));
}

static inline int e10k_q_rdesc_legacy_prtval(char *_s, size_t _size, e10k_q_rdesc_legacy_t _regval) __attribute__ ((always_inline));
static inline int e10k_q_rdesc_legacy_prtval(char *_s, size_t _size, e10k_q_rdesc_legacy_t _regval)
{
    int _r = 0;
    int _avail;
    int _rc;
    _avail = ((_r > _size) ? 0 : (_size - _r));
    _rc = snprintf(_s + _r, _avail, " buffer =\t%" PRIx64 "\t(Buffer Address)\n", e10k_q_rdesc_legacy_buffer_extract(_regval));
    if ((_rc > 0) && (_rc < _avail)) {
        _r = (_r + _rc);
    }
    _avail = ((_r > _size) ? 0 : (_size - _r));
    _rc = snprintf(_s + _r, _avail, " length =\t%" PRIx16 "\t(Length Field)\n", e10k_q_rdesc_legacy_length_extract(_regval));
    if ((_rc > 0) && (_rc < _avail)) {
        _r = (_r + _rc);
    }
    _avail = ((_r > _size) ? 0 : (_size - _r));
    _rc = snprintf(_s + _r, _avail, " checksum =\t%" PRIx16 "\t(Fragment Checksum)\n", e10k_q_rdesc_legacy_checksum_extract(_regval));
    if ((_rc > 0) && (_rc < _avail)) {
        _r = (_r + _rc);
    }
    _avail = ((_r > _size) ? 0 : (_size - _r));
    _rc = snprintf(_s + _r, _avail, " dd =\t%" PRIx8 "\t(Descriptor Done)\n", e10k_q_rdesc_legacy_dd_extract(_regval));
    if ((_rc > 0) && (_rc < _avail)) {
        _r = (_r + _rc);
    }
    _avail = ((_r > _size) ? 0 : (_size - _r));
    _rc = snprintf(_s + _r, _avail, " eop =\t%" PRIx8 "\t(End of Packet)\n", e10k_q_rdesc_legacy_eop_extract(_regval));
    if ((_rc > 0) && (_rc < _avail)) {
        _r = (_r + _rc);
    }
    _avail = ((_r > _size) ? 0 : (_size - _r));
    _rc = snprintf(_s + _r, _avail, " vp =\t%" PRIx8 "\t(VLAN Packet)\n", e10k_q_rdesc_legacy_vp_extract(_regval));
    if ((_rc > 0) && (_rc < _avail)) {
        _r = (_r + _rc);
    }
    _avail = ((_r > _size) ? 0 : (_size - _r));
    _rc = snprintf(_s + _r, _avail, " udpcs =\t%" PRIx8 "\t(UDP Checksum)\n", e10k_q_rdesc_legacy_udpcs_extract(_regval));
    if ((_rc > 0) && (_rc < _avail)) {
        _r = (_r + _rc);
    }
    _avail = ((_r > _size) ? 0 : (_size - _r));
    _rc = snprintf(_s + _r, _avail, " l4cs =\t%" PRIx8 "\t(L4 Checksum)\n", e10k_q_rdesc_legacy_l4cs_extract(_regval));
    if ((_rc > 0) && (_rc < _avail)) {
        _r = (_r + _rc);
    }
    _avail = ((_r > _size) ? 0 : (_size - _r));
    _rc = snprintf(_s + _r, _avail, " ipcs =\t%" PRIx8 "\t(Ipv4 Checksum)\n", e10k_q_rdesc_legacy_ipcs_extract(_regval));
    if ((_rc > 0) && (_rc < _avail)) {
        _r = (_r + _rc);
    }
    _avail = ((_r > _size) ? 0 : (_size - _r));
    _rc = snprintf(_s + _r, _avail, " pif =\t%" PRIx8 "\t(Non Unicast Address)\n", e10k_q_rdesc_legacy_pif_extract(_regval));
    if ((_rc > 0) && (_rc < _avail)) {
        _r = (_r + _rc);
    }
    _avail = ((_r > _size) ? 0 : (_size - _r));
    _rc = snprintf(_s + _r, _avail, " rxe =\t%" PRIx8 "\t(MAC error)\n", e10k_q_rdesc_legacy_rxe_extract(_regval));
    if ((_rc > 0) && (_rc < _avail)) {
        _r = (_r + _rc);
    }
    _avail = ((_r > _size) ? 0 : (_size - _r));
    _rc = snprintf(_s + _r, _avail, " tcpe =\t%" PRIx8 "\t(TCP/UDP Checksum Error)\n", e10k_q_rdesc_legacy_tcpe_extract(_regval));
    if ((_rc > 0) && (_rc < _avail)) {
        _r = (_r + _rc);
    }
    _avail = ((_r > _size) ? 0 : (_size - _r));
    _rc = snprintf(_s + _r, _avail, " ipe =\t%" PRIx8 "\t(Ipv4 Checksum Error)\n", e10k_q_rdesc_legacy_ipe_extract(_regval));
    if ((_rc > 0) && (_rc < _avail)) {
        _r = (_r + _rc);
    }
    _avail = ((_r > _size) ? 0 : (_size - _r));
    _rc = snprintf(_s + _r, _avail, " vlan_tag =\t%" PRIx16 "\t(VLAN Tag)\n", e10k_q_rdesc_legacy_vlan_tag_extract(_regval));
    if ((_rc > 0) && (_rc < _avail)) {
        _r = (_r + _rc);
    }
    return(_r);
}

/*
 * Data type: e10k_q_tdesc_legacy_t
 * Description: Legacy Transmit Descriptor Format
 * Fields:
 *   buffer	(size 64, offset 0, init 0):	RW	Buffer Address
 *   length	(size 16, offset 64, init 0):	RW	Length
 *   cso	(size 8, offset 80, init 0):	RW	Checksum Offset
 *   eop	(size 1, offset 88, init 0):	RW	End of Packet
 *   ifcs	(size 1, offset 89, init 0):	RW	Insert FCS
 *   ic	(size 1, offset 90, init 0):	RW	Insert Checksum
 *   rs	(size 1, offset 91, init 0):	RW	Report Status
 *   _anon92	(size 1, offset 92, init 0):	RSVD	_
 *   dext	(size 1, offset 93, init 0):	RW	Descriptor extension
 *   vle	(size 1, offset 94, init 0):	RW	VLAN Packet Enable
 *   _anon95	(size 1, offset 95, init 0):	RSVD	_
 *   dd	(size 1, offset 96, init 0):	RW	 Descriptor Done Status
 *   _anon97	(size 3, offset 97, init 0):	RSVD	_
 *   _anon100	(size 4, offset 100, init 0):	RSVD	_
 *   css	(size 8, offset 104, init 0):	RW	Checksum Start
 *   vlan	(size 16, offset 112, init 0):	RW	VLAN Field
 */
typedef uint8_t *e10k_q_tdesc_legacy_t;
typedef uint8_t e10k_q_tdesc_legacy_array_t[16];
static const size_t e10k_q_tdesc_legacy_size = sizeof(e10k_q_tdesc_legacy_array_t );
static inline uint64_t e10k_q_tdesc_legacy_buffer_extract(e10k_q_tdesc_legacy_t _dtptr) __attribute__ ((always_inline));
static inline uint64_t e10k_q_tdesc_legacy_buffer_extract(e10k_q_tdesc_legacy_t _dtptr)
{
    return(((*((uint64_t *)(0 + _dtptr))) & 0xffffffffffffffff) >> 0);
}

static inline void e10k_q_tdesc_legacy_buffer_insert(e10k_q_tdesc_legacy_t _dtptr, uint64_t _fieldval) __attribute__ ((always_inline));
static inline void e10k_q_tdesc_legacy_buffer_insert(e10k_q_tdesc_legacy_t _dtptr, uint64_t _fieldval)
{
    *((uint64_t *)(0 + _dtptr)) = (((*((uint64_t *)(0 + _dtptr))) & 0x0) | (0xffffffffffffffff & (_fieldval << 0)));
}

static inline uint16_t e10k_q_tdesc_legacy_length_extract(e10k_q_tdesc_legacy_t _dtptr) __attribute__ ((always_inline));
static inline uint16_t e10k_q_tdesc_legacy_length_extract(e10k_q_tdesc_legacy_t _dtptr)
{
    return(((*((uint16_t *)(8 + _dtptr))) & 0xffff) >> 0);
}

static inline void e10k_q_tdesc_legacy_length_insert(e10k_q_tdesc_legacy_t _dtptr, uint16_t _fieldval) __attribute__ ((always_inline));
static inline void e10k_q_tdesc_legacy_length_insert(e10k_q_tdesc_legacy_t _dtptr, uint16_t _fieldval)
{
    *((uint16_t *)(8 + _dtptr)) = (((*((uint16_t *)(8 + _dtptr))) & 0x0) | (0xffff & (_fieldval << 0)));
}

static inline uint8_t e10k_q_tdesc_legacy_cso_extract(e10k_q_tdesc_legacy_t _dtptr) __attribute__ ((always_inline));
static inline uint8_t e10k_q_tdesc_legacy_cso_extract(e10k_q_tdesc_legacy_t _dtptr)
{
    return(((*((uint8_t *)(10 + _dtptr))) & 0xff) >> 0);
}

static inline void e10k_q_tdesc_legacy_cso_insert(e10k_q_tdesc_legacy_t _dtptr, uint8_t _fieldval) __attribute__ ((always_inline));
static inline void e10k_q_tdesc_legacy_cso_insert(e10k_q_tdesc_legacy_t _dtptr, uint8_t _fieldval)
{
    *((uint8_t *)(10 + _dtptr)) = (((*((uint8_t *)(10 + _dtptr))) & 0x0) | (0xff & (_fieldval << 0)));
}

static inline uint8_t e10k_q_tdesc_legacy_eop_extract(e10k_q_tdesc_legacy_t _dtptr) __attribute__ ((always_inline));
static inline uint8_t e10k_q_tdesc_legacy_eop_extract(e10k_q_tdesc_legacy_t _dtptr)
{
    return(((*((uint8_t *)(11 + _dtptr))) & 0x1) >> 0);
}

static inline void e10k_q_tdesc_legacy_eop_insert(e10k_q_tdesc_legacy_t _dtptr, uint8_t _fieldval) __attribute__ ((always_inline));
static inline void e10k_q_tdesc_legacy_eop_insert(e10k_q_tdesc_legacy_t _dtptr, uint8_t _fieldval)
{
    *((uint8_t *)(11 + _dtptr)) = (((*((uint8_t *)(11 + _dtptr))) & 0xfe) | (0x1 & (_fieldval << 0)));
}

static inline uint8_t e10k_q_tdesc_legacy_ifcs_extract(e10k_q_tdesc_legacy_t _dtptr) __attribute__ ((always_inline));
static inline uint8_t e10k_q_tdesc_legacy_ifcs_extract(e10k_q_tdesc_legacy_t _dtptr)
{
    return(((*((uint8_t *)(11 + _dtptr))) & 0x2) >> 1);
}

static inline void e10k_q_tdesc_legacy_ifcs_insert(e10k_q_tdesc_legacy_t _dtptr, uint8_t _fieldval) __attribute__ ((always_inline));
static inline void e10k_q_tdesc_legacy_ifcs_insert(e10k_q_tdesc_legacy_t _dtptr, uint8_t _fieldval)
{
    *((uint8_t *)(11 + _dtptr)) = (((*((uint8_t *)(11 + _dtptr))) & 0xfd) | (0x2 & (_fieldval << 1)));
}

static inline uint8_t e10k_q_tdesc_legacy_ic_extract(e10k_q_tdesc_legacy_t _dtptr) __attribute__ ((always_inline));
static inline uint8_t e10k_q_tdesc_legacy_ic_extract(e10k_q_tdesc_legacy_t _dtptr)
{
    return(((*((uint8_t *)(11 + _dtptr))) & 0x4) >> 2);
}

static inline void e10k_q_tdesc_legacy_ic_insert(e10k_q_tdesc_legacy_t _dtptr, uint8_t _fieldval) __attribute__ ((always_inline));
static inline void e10k_q_tdesc_legacy_ic_insert(e10k_q_tdesc_legacy_t _dtptr, uint8_t _fieldval)
{
    *((uint8_t *)(11 + _dtptr)) = (((*((uint8_t *)(11 + _dtptr))) & 0xfb) | (0x4 & (_fieldval << 2)));
}

static inline uint8_t e10k_q_tdesc_legacy_rs_extract(e10k_q_tdesc_legacy_t _dtptr) __attribute__ ((always_inline));
static inline uint8_t e10k_q_tdesc_legacy_rs_extract(e10k_q_tdesc_legacy_t _dtptr)
{
    return(((*((uint8_t *)(11 + _dtptr))) & 0x8) >> 3);
}

static inline void e10k_q_tdesc_legacy_rs_insert(e10k_q_tdesc_legacy_t _dtptr, uint8_t _fieldval) __attribute__ ((always_inline));
static inline void e10k_q_tdesc_legacy_rs_insert(e10k_q_tdesc_legacy_t _dtptr, uint8_t _fieldval)
{
    *((uint8_t *)(11 + _dtptr)) = (((*((uint8_t *)(11 + _dtptr))) & 0xf7) | (0x8 & (_fieldval << 3)));
}

static inline uint8_t e10k_q_tdesc_legacy_dext_extract(e10k_q_tdesc_legacy_t _dtptr) __attribute__ ((always_inline));
static inline uint8_t e10k_q_tdesc_legacy_dext_extract(e10k_q_tdesc_legacy_t _dtptr)
{
    return(((*((uint8_t *)(11 + _dtptr))) & 0x20) >> 5);
}

static inline void e10k_q_tdesc_legacy_dext_insert(e10k_q_tdesc_legacy_t _dtptr, uint8_t _fieldval) __attribute__ ((always_inline));
static inline void e10k_q_tdesc_legacy_dext_insert(e10k_q_tdesc_legacy_t _dtptr, uint8_t _fieldval)
{
    *((uint8_t *)(11 + _dtptr)) = (((*((uint8_t *)(11 + _dtptr))) & 0xdf) | (0x20 & (_fieldval << 5)));
}

static inline uint8_t e10k_q_tdesc_legacy_vle_extract(e10k_q_tdesc_legacy_t _dtptr) __attribute__ ((always_inline));
static inline uint8_t e10k_q_tdesc_legacy_vle_extract(e10k_q_tdesc_legacy_t _dtptr)
{
    return(((*((uint8_t *)(11 + _dtptr))) & 0x40) >> 6);
}

static inline void e10k_q_tdesc_legacy_vle_insert(e10k_q_tdesc_legacy_t _dtptr, uint8_t _fieldval) __attribute__ ((always_inline));
static inline void e10k_q_tdesc_legacy_vle_insert(e10k_q_tdesc_legacy_t _dtptr, uint8_t _fieldval)
{
    *((uint8_t *)(11 + _dtptr)) = (((*((uint8_t *)(11 + _dtptr))) & 0xbf) | (0x40 & (_fieldval << 6)));
}

static inline uint8_t e10k_q_tdesc_legacy_dd_extract(e10k_q_tdesc_legacy_t _dtptr) __attribute__ ((always_inline));
static inline uint8_t e10k_q_tdesc_legacy_dd_extract(e10k_q_tdesc_legacy_t _dtptr)
{
    return(((*((uint8_t *)(12 + _dtptr))) & 0x1) >> 0);
}

static inline void e10k_q_tdesc_legacy_dd_insert(e10k_q_tdesc_legacy_t _dtptr, uint8_t _fieldval) __attribute__ ((always_inline));
static inline void e10k_q_tdesc_legacy_dd_insert(e10k_q_tdesc_legacy_t _dtptr, uint8_t _fieldval)
{
    *((uint8_t *)(12 + _dtptr)) = (((*((uint8_t *)(12 + _dtptr))) & 0xfe) | (0x1 & (_fieldval << 0)));
}

static inline uint8_t e10k_q_tdesc_legacy_css_extract(e10k_q_tdesc_legacy_t _dtptr) __attribute__ ((always_inline));
static inline uint8_t e10k_q_tdesc_legacy_css_extract(e10k_q_tdesc_legacy_t _dtptr)
{
    return(((*((uint8_t *)(13 + _dtptr))) & 0xff) >> 0);
}

static inline void e10k_q_tdesc_legacy_css_insert(e10k_q_tdesc_legacy_t _dtptr, uint8_t _fieldval) __attribute__ ((always_inline));
static inline void e10k_q_tdesc_legacy_css_insert(e10k_q_tdesc_legacy_t _dtptr, uint8_t _fieldval)
{
    *((uint8_t *)(13 + _dtptr)) = (((*((uint8_t *)(13 + _dtptr))) & 0x0) | (0xff & (_fieldval << 0)));
}

static inline uint16_t e10k_q_tdesc_legacy_vlan_extract(e10k_q_tdesc_legacy_t _dtptr) __attribute__ ((always_inline));
static inline uint16_t e10k_q_tdesc_legacy_vlan_extract(e10k_q_tdesc_legacy_t _dtptr)
{
    return(((*((uint16_t *)(14 + _dtptr))) & 0xffff) >> 0);
}

static inline void e10k_q_tdesc_legacy_vlan_insert(e10k_q_tdesc_legacy_t _dtptr, uint16_t _fieldval) __attribute__ ((always_inline));
static inline void e10k_q_tdesc_legacy_vlan_insert(e10k_q_tdesc_legacy_t _dtptr, uint16_t _fieldval)
{
    *((uint16_t *)(14 + _dtptr)) = (((*((uint16_t *)(14 + _dtptr))) & 0x0) | (0xffff & (_fieldval << 0)));
}

static inline int e10k_q_tdesc_legacy_prtval(char *_s, size_t _size, e10k_q_tdesc_legacy_t _regval) __attribute__ ((always_inline));
static inline int e10k_q_tdesc_legacy_prtval(char *_s, size_t _size, e10k_q_tdesc_legacy_t _regval)
{
    int _r = 0;
    int _avail;
    int _rc;
    _avail = ((_r > _size) ? 0 : (_size - _r));
    _rc = snprintf(_s + _r, _avail, " buffer =\t%" PRIx64 "\t(Buffer Address)\n", e10k_q_tdesc_legacy_buffer_extract(_regval));
    if ((_rc > 0) && (_rc < _avail)) {
        _r = (_r + _rc);
    }
    _avail = ((_r > _size) ? 0 : (_size - _r));
    _rc = snprintf(_s + _r, _avail, " length =\t%" PRIx16 "\t(Length)\n", e10k_q_tdesc_legacy_length_extract(_regval));
    if ((_rc > 0) && (_rc < _avail)) {
        _r = (_r + _rc);
    }
    _avail = ((_r > _size) ? 0 : (_size - _r));
    _rc = snprintf(_s + _r, _avail, " cso =\t%" PRIx8 "\t(Checksum Offset)\n", e10k_q_tdesc_legacy_cso_extract(_regval));
    if ((_rc > 0) && (_rc < _avail)) {
        _r = (_r + _rc);
    }
    _avail = ((_r > _size) ? 0 : (_size - _r));
    _rc = snprintf(_s + _r, _avail, " eop =\t%" PRIx8 "\t(End of Packet)\n", e10k_q_tdesc_legacy_eop_extract(_regval));
    if ((_rc > 0) && (_rc < _avail)) {
        _r = (_r + _rc);
    }
    _avail = ((_r > _size) ? 0 : (_size - _r));
    _rc = snprintf(_s + _r, _avail, " ifcs =\t%" PRIx8 "\t(Insert FCS)\n", e10k_q_tdesc_legacy_ifcs_extract(_regval));
    if ((_rc > 0) && (_rc < _avail)) {
        _r = (_r + _rc);
    }
    _avail = ((_r > _size) ? 0 : (_size - _r));
    _rc = snprintf(_s + _r, _avail, " ic =\t%" PRIx8 "\t(Insert Checksum)\n", e10k_q_tdesc_legacy_ic_extract(_regval));
    if ((_rc > 0) && (_rc < _avail)) {
        _r = (_r + _rc);
    }
    _avail = ((_r > _size) ? 0 : (_size - _r));
    _rc = snprintf(_s + _r, _avail, " rs =\t%" PRIx8 "\t(Report Status)\n", e10k_q_tdesc_legacy_rs_extract(_regval));
    if ((_rc > 0) && (_rc < _avail)) {
        _r = (_r + _rc);
    }
    _avail = ((_r > _size) ? 0 : (_size - _r));
    _rc = snprintf(_s + _r, _avail, " dext =\t%" PRIx8 "\t(Descriptor extension)\n", e10k_q_tdesc_legacy_dext_extract(_regval));
    if ((_rc > 0) && (_rc < _avail)) {
        _r = (_r + _rc);
    }
    _avail = ((_r > _size) ? 0 : (_size - _r));
    _rc = snprintf(_s + _r, _avail, " vle =\t%" PRIx8 "\t(VLAN Packet Enable)\n", e10k_q_tdesc_legacy_vle_extract(_regval));
    if ((_rc > 0) && (_rc < _avail)) {
        _r = (_r + _rc);
    }
    _avail = ((_r > _size) ? 0 : (_size - _r));
    _rc = snprintf(_s + _r, _avail, " dd =\t%" PRIx8 "\t( Descriptor Done Status)\n", e10k_q_tdesc_legacy_dd_extract(_regval));
    if ((_rc > 0) && (_rc < _avail)) {
        _r = (_r + _rc);
    }
    _avail = ((_r > _size) ? 0 : (_size - _r));
    _rc = snprintf(_s + _r, _avail, " css =\t%" PRIx8 "\t(Checksum Start)\n", e10k_q_tdesc_legacy_css_extract(_regval));
    if ((_rc > 0) && (_rc < _avail)) {
        _r = (_r + _rc);
    }
    _avail = ((_r > _size) ? 0 : (_size - _r));
    _rc = snprintf(_s + _r, _avail, " vlan =\t%" PRIx16 "\t(VLAN Field)\n", e10k_q_tdesc_legacy_vlan_extract(_regval));
    if ((_rc > 0) && (_rc < _avail)) {
        _r = (_r + _rc);
    }
    return(_r);
}

/*
 * Device representation structure
 */
struct __DN(t) {
};
typedef struct __DN(t) __DN(t);

// No registers in this device

/*
 * Device Initialization function
 */
static inline void e10k_q_initialize(__DN(t) *_dev) __attribute__ ((always_inline));
static inline void e10k_q_initialize(__DN(t) *_dev)
{
}

static inline int e10k_q_pr(char *_s, size_t _size, __DN(t) *_dev) __attribute__ ((always_inline));
static inline int e10k_q_pr(char *_s, size_t _size, __DN(t) *_dev)
{
    int _r = 0;
    int _avail;
    int _rc;
    _avail = ((_r > _size) ? 0 : (_size - _r));
    _rc = snprintf(_s + _r, _avail, "-------------------------\n");
    if ((_rc > 0) && (_rc < _avail)) {
        _r = (_r + _rc);
    }
    _avail = ((_r > _size) ? 0 : (_size - _r));
    _rc = snprintf(_s + _r, _avail, "Dump of device e10k_q (Intel 82599 10 GbE Controller Queues):\n");
    if ((_rc > 0) && (_rc < _avail)) {
        _r = (_r + _rc);
    }
    _avail = ((_r > _size) ? 0 : (_size - _r));
    _rc = snprintf(_s + _r, _avail, "End of dump of device e10k_q\n");
    if ((_rc > 0) && (_rc < _avail)) {
        _r = (_r + _rc);
    }
    _avail = ((_r > _size) ? 0 : (_size - _r));
    _rc = snprintf(_s + _r, _avail, "-------------------------\n");
    if ((_rc > 0) && (_rc < _avail)) {
        _r = (_r + _rc);
    }
    return(_r);
}

#undef __DN
#endif // __e10k_q_DEV_H
